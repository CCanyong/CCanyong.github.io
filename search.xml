<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jvm之垃圾回收（二）</title>
      <link href="/2019/11/14/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B62/"/>
      <url>/2019/11/14/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B62/</url>
      
        <content type="html"><![CDATA[<h3 id="一、垃圾收集器"><a href="#一、垃圾收集器" class="headerlink" title="一、垃圾收集器"></a>一、垃圾收集器</h3><h4 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h4><h5 id="1-GC-停顿时间"><a href="#1-GC-停顿时间" class="headerlink" title="1. GC 停顿时间"></a>1. GC 停顿时间</h5><blockquote><p>垃圾收集所用时间长短，降低 <em>GC</em> 停顿时间势必会<strong>牺牲吞吐量和新生代空间</strong>，将新生代调小，每次垃圾收集的<strong>时间就会变短</strong>，但同时也会使得垃圾收集变得<strong>更加频繁</strong></p></blockquote><h5 id="2-吞吐量"><a href="#2-吞吐量" class="headerlink" title="2. 吞吐量"></a>2. 吞吐量</h5><blockquote><p><em>吞吐量 = CPU运行用户代码时间  /（运行用户代码时间+垃圾收集时间）</em> </p></blockquote><blockquote><p>提高吞吐量其实就是提高 cpu 执行有效代码的时间占比</p></blockquote><h4 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1. Serial收集器"></a>1. Serial收集器</h4><blockquote><p>单线程收集器，只使用一条线程进行垃圾收集，同时暂停其他用户线程（Stop The World）</p></blockquote><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/jvm-Serial+SerialOld%E8%BF%90%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Serial+SerialOld运行示意图"></p><h5 id="1-1-适用范围"><a href="#1-1-适用范围" class="headerlink" title="1.1 适用范围"></a>1.1 适用范围</h5><ol><li>常用于 <em>client</em> 模式下的虚拟机</li></ol><h4 id="2-ParNew收集器"><a href="#2-ParNew收集器" class="headerlink" title="2. ParNew收集器"></a>2. ParNew收集器</h4><blockquote><p><em>Serial</em> 收集器的多线程版本，除了使用多线程进行垃圾回收，其他行为都与 <em>Serial</em> 收集器一样（控制参数、收集算法、<em>stop the world、</em>对象分配规则、回收策略）</p></blockquote><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/jvm-ParNew+SerialOld%E8%BF%90%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="ParNew+SerialOld运行示意图"></p><h5 id="2-1-适用范围"><a href="#2-1-适用范围" class="headerlink" title="2.1 适用范围"></a>2.1 适用范围</h5><ol><li>server 模式下虚拟机首选的新生代收集器</li></ol><h5 id="2-2-局限"><a href="#2-2-局限" class="headerlink" title="2.2 局限"></a>2.2 局限</h5><ol><li>在单 cpu 环境下，表现效果不一定好于Serial收集器，有线程交互开销</li></ol><h4 id="3-Parallel-Scavenge-收集器（吞吐量优先收集器）"><a href="#3-Parallel-Scavenge-收集器（吞吐量优先收集器）" class="headerlink" title="3. Parallel Scavenge 收集器（吞吐量优先收集器）"></a>3. Parallel Scavenge 收集器（吞吐量优先收集器）</h4><blockquote><p>新生代收集器，采用复制算法，同时也是并行的多线程收集器</p></blockquote><h5 id="3-1-特点"><a href="#3-1-特点" class="headerlink" title="3.1 特点"></a>3.1 特点</h5><blockquote><p>CMS 等垃圾收集器致力于缩短垃圾收集时用户线程的停顿时间，而 <em>Parallel Scavenge</em>  收集器的目标时达到一个可控制的吞吐量</p></blockquote><h5 id="3-2-适用范围"><a href="#3-2-适用范围" class="headerlink" title="3.2 适用范围"></a>3.2 适用范围</h5><ol><li>停顿时间越短的收集器就越适合于用户交互的程序，良好的响应速度可以提升用户体验</li><li>高吞吐量收集器可以高效率利用 <em>CPU</em> 时间，尽快完成任务，适用于后台执行而不需要过多交互的任务</li></ol><h4 id="4-Serial-Old-收集器"><a href="#4-Serial-Old-收集器" class="headerlink" title="4. Serial Old 收集器"></a>4. Serial Old 收集器</h4>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm之垃圾回收（一）</title>
      <link href="/2019/11/14/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B61/"/>
      <url>/2019/11/14/jvm-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B61/</url>
      
        <content type="html"><![CDATA[<h3 id="一、判断对象是否可回收"><a href="#一、判断对象是否可回收" class="headerlink" title="一、判断对象是否可回收"></a>一、判断对象是否可回收</h3><h4 id="1-引用计数法"><a href="#1-引用计数法" class="headerlink" title="1. 引用计数法"></a>1. 引用计数法</h4><blockquote><p>给对象添加一个引用计数器，每当有一个地方引用他的时候，计数器的值<strong>加一</strong>，当引用失效时，计数器的值<strong>减一</strong>，任何时刻计数器为 0 的对象就是不可能在被使用的</p></blockquote><h5 id="1-1-优缺点"><a href="#1-1-优缺点" class="headerlink" title="1.1 优缺点"></a>1.1 优缺点</h5><ol><li><p>优点</p><blockquote><p>实现简单，判定效率高</p></blockquote></li><li><p>缺点</p><blockquote><p>无法解决循环引用的问题</p></blockquote></li></ol><h5 id="1-2-循环引用案例"><a href="#1-2-循环引用案例" class="headerlink" title="1.2 循环引用案例"></a>1.2 循环引用案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CircularRef instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若采用引用计数法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建对象，计数器各 +1 为 1</span></span><br><span class="line">        CircularRef a = <span class="keyword">new</span> CircularRef();</span><br><span class="line">        CircularRef b = <span class="keyword">new</span> CircularRef();</span><br><span class="line">        <span class="comment">// 循环引用 计数器各 +1 为 2</span></span><br><span class="line">        a.instance = b;</span><br><span class="line">        b.instance = a;</span><br><span class="line">        <span class="comment">// 取消引用 计数器各 -1 为 1</span></span><br><span class="line">        a = <span class="keyword">null</span>;</span><br><span class="line">        b = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// gc 计数器不为0，不回收</span></span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>gc 日志</p><p>0.284: [GC (System.gc()) [PSYoungGen: 3286K-&gt;712K(37888K)] <strong><em>3286K-&gt;720K</em></strong>(123904K), 0.0031965 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </p><p>内存被回收，说明 jvm 采用的不是引用计数法</p></blockquote><h4 id="2-可达性分析"><a href="#2-可达性分析" class="headerlink" title="2. 可达性分析"></a>2. 可达性分析</h4><blockquote><p>sun 的 jvm 不是采用引用计数法，那么又是采取什么算法呢? 采用的是可达性分析，通过一系列称为 <strong><em>“ GC ROOTS ”</em></strong> 的对象作为起点，开始向下搜索，搜索路径称为<strong>引用链</strong>，当一个对象到 <em>GC ROOTS</em> 没有任何引用链的时候，即 <em>GC ROOTS</em> 到这个对象不可达的时候，证明测对象不可用</p></blockquote><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/jvm-可达性分析.png" alt="可达性分析" style="zoom:80%;"><h5 id="2-1-可作为-GC-ROOTS-的对象"><a href="#2-1-可作为-GC-ROOTS-的对象" class="headerlink" title="2.1 可作为 GC ROOTS 的对象"></a>2.1 可作为 GC ROOTS 的对象</h5><ol><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>方法区中静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中 JNI （Native方法）中引用的对象</li></ol><h4 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h4><blockquote><p>为了达到这样的需求：某一类对象，在内存空间足够时，则保留，当内存空间在进行回收之后仍紧张时，则回收这些对象。有了引用的扩展（JDK 1.2）</p></blockquote><h5 id="3-1-强引用"><a href="#3-1-强引用" class="headerlink" title="3.1 强引用"></a>3.1 强引用</h5><blockquote><p>使用 <strong>new</strong> 创建对象，强引用若存在，则对象永远不会被回收</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h5 id="3-2-软引用"><a href="#3-2-软引用" class="headerlink" title="3.2 软引用"></a>3.2 软引用</h5><blockquote><p>弱引用在内存将要溢出时被回收，若不溢出，则不回收</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建强引用</span></span><br><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="comment">// 转为弱引用</span></span><br><span class="line">SoftReference&lt;Object&gt; objRef = <span class="keyword">new</span> SoftReference&lt;&gt;(obj);</span><br><span class="line"><span class="comment">//取消强引用</span></span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h5 id="3-3-弱引用"><a href="#3-3-弱引用" class="headerlink" title="3.3 弱引用"></a>3.3 弱引用</h5><blockquote><p>被弱引用关联且无强引用的对象只能存活到下次 GC 发生之前，即一次 GC 回收所有弱引用对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();<span class="comment">// 新建强引用</span></span><br><span class="line">WeakReference&lt;Object&gt; objRef = <span class="keyword">new</span> WeakReference&lt;&gt;(obj); <span class="comment">// 转为弱引用</span></span><br><span class="line"></span><br><span class="line">System.gc();<span class="comment">// 此时 obj 存在将引用，不会被回收</span></span><br><span class="line"></span><br><span class="line">obj = <span class="keyword">null</span>;<span class="comment">// 取消强引用</span></span><br><span class="line"></span><br><span class="line">System.gc();<span class="comment">// obj 将被回收</span></span><br></pre></td></tr></table></figure><h5 id="3-4-虚引用-幽灵引用、幻影引用"><a href="#3-4-虚引用-幽灵引用、幻影引用" class="headerlink" title="3.4 虚引用 (幽灵引用、幻影引用)"></a>3.4 虚引用 (幽灵引用、幻影引用)</h5><blockquote><p>一个对象是否有虚引用，对此生存周期无任何影响，作用在于虚引用对象被回收时收到一个系统通知 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PhantomReference&lt;Object&gt; objRef = <span class="keyword">new</span> PhantomReference&lt;&gt;(obj);</span><br></pre></td></tr></table></figure><h4 id="4-对象的消亡过程"><a href="#4-对象的消亡过程" class="headerlink" title="4. 对象的消亡过程"></a>4. 对象的消亡过程</h4><blockquote><p>可达性分析后发现没有和GC Roots 相连接的引用。第一次标记并筛选：<strong>如果对象没有覆盖finalize() 方法或者finalize() 方法已经被虚拟机调用过，</strong>虚拟机将认为此对象<strong>没有必要</strong>执行finalize()方法。如果对象被判定为有必要执行finalize() 方法，此对象将被放入F-Queue队列并稍后由虚拟机自动建立的、优先级较低的Finalizer线程去执行它。这里的执行是指触发这个方法但不等待它的结束。稍后GC将对F-Queue中放入对象进行第二次小规模的标记，如果对象要在finalize() 中成功拯救自己——只要重新与引用链上的任何一个对象简历关联即可（比如把自己（this）赋值给某个类变量或者对象的成员变量），那在第二次标记时这个对象将被<strong>移除“即将回收”的集合</strong>。不过任何一个对象的finalize() 方法都只会被系统自动<strong>调用一次</strong>。所以自救的方法只能用一次。</p></blockquote><h5 id="4-1-对象消亡过程"><a href="#4-1-对象消亡过程" class="headerlink" title="4.1 对象消亡过程"></a>4.1 对象消亡过程</h5><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/jvm-对象死亡过程.png" style="zoom:80%;"><h5 id="4-2-自救示例"><a href="#4-2-自救示例" class="headerlink" title="4.2 自救示例"></a>4.2 自救示例</h5><ol><li>代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalizeGC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FinalizeGC INSTANCE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">"finalize executed"</span>);</span><br><span class="line">        <span class="comment">// 重新引用</span></span><br><span class="line">        INSTANCE = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> FinalizeGC();</span><br><span class="line">        INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">// 等待执行 F-Queue 执行 finalize</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(<span class="string">"i am dead"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"i am alive"</span>);</span><br><span class="line">        INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(<span class="string">"i am dead"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"i am alive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出：</span></span><br><span class="line"><span class="comment"> * finalize executed</span></span><br><span class="line"><span class="comment"> * i am alive</span></span><br><span class="line"><span class="comment"> * i am dead</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="5-回收方法区"><a href="#5-回收方法区" class="headerlink" title="5. 回收方法区"></a>5. 回收方法区</h4><blockquote><p>java 虚拟机规范中不要求虚拟机在方法区中实现垃圾收集（在方法区中进行垃圾收集“性价比低”）</p></blockquote><h5 id="5-1-回收内容"><a href="#5-1-回收内容" class="headerlink" title="5.1 回收内容"></a>5.1 回收内容</h5><ol><li><p>废弃常量</p><blockquote><p>当没有对象引用常量池的对象，如果这时发生内存回收，有必要的话会将其清理出常量池。</p></blockquote></li><li><p>无用的类</p><ul><li>所有实例被回收</li><li>加载该类的类加载器被回收</li><li>该类对应的 <em>Class</em> 对象没有在任何地方被引用（无法通过反射访问该类的方法）</li></ul></li></ol><h5 id="5-2-什么时候需要类回收"><a href="#5-2-什么时候需要类回收" class="headerlink" title="5.2 什么时候需要类回收"></a>5.2 什么时候需要类回收</h5><blockquote><p>在大量使用<strong>反射、动态代理、CGLib</strong> 等字节码框架、<strong>动态生成 JSP 以及OSGi</strong> 这类频繁<strong>自定义 ClassLoader</strong> 的场景都需要虚拟机具备<strong>类卸载</strong>的功能，以确保<strong>永久代</strong>不会溢出</p></blockquote><h3 id="二、垃圾收集算法"><a href="#二、垃圾收集算法" class="headerlink" title="二、垃圾收集算法"></a>二、垃圾收集算法</h3><blockquote><p>垃圾收集算法实际大量程序细节，各个虚拟机的收集算法各不相同</p></blockquote><h4 id="1-分代收集算法"><a href="#1-分代收集算法" class="headerlink" title="1. 分代收集算法"></a>1. 分代收集算法</h4><blockquote><p>当前商业虚拟机垃圾收集都采用“分代收集”算法，根据对象存活周期的不同将内存划分为几块（新生代和老年代），然后根据各块内存特点采用合适的收集算法</p></blockquote><h4 id="2-标记-清除算法"><a href="#2-标记-清除算法" class="headerlink" title="2. 标记-清除算法"></a>2. 标记-清除算法</h4><h5 id="2-1-算法步骤"><a href="#2-1-算法步骤" class="headerlink" title="2.1 算法步骤"></a>2.1 算法步骤</h5><blockquote><p>标记-清除算法分两个阶段，首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象</p></blockquote><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/jvm-%E6%A0%87%E8%AE%B0%E6%B8%85%E7%90%86%E7%AE%97%E6%B3%95.png" alt></p><h5 id="2-2-不足"><a href="#2-2-不足" class="headerlink" title="2.2 不足"></a>2.2 不足</h5><ol><li><p>效率问题</p><blockquote><p>标记和清除两个过程效率都不高</p></blockquote></li><li><p>空间问题</p><blockquote><p>标记清除之后会产生<strong>大量不连续空间</strong>，空间碎片太多导致以后程序运行过程产生大对象，无法找到足够的连续的内存而导致不得不提前触发下一次 <strong>GC</strong></p></blockquote></li></ol><h4 id="3-复制算法"><a href="#3-复制算法" class="headerlink" title="3. 复制算法"></a>3. 复制算法</h4><h5 id="3-1-算法步骤"><a href="#3-1-算法步骤" class="headerlink" title="3.1 算法步骤"></a>3.1 算法步骤</h5><blockquote><p>将可用内存容量划分为大小相同的两块，每次只使用一块，当一块用完了之后将可用对象赋值到另一块内存上，然后把已使用过的内存一次清理掉</p></blockquote><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/jvm-%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.png" alt></p><h5 id="3-2-优缺点"><a href="#3-2-优缺点" class="headerlink" title="3.2 优缺点"></a>3.2 优缺点</h5><ol><li>优点<ul><li>内存分配时无需考虑内存碎片</li><li>实现简单，运行高效</li></ul></li><li>缺点<ul><li>牺牲内存空间</li></ul></li></ol><h5 id="3-3-改善"><a href="#3-3-改善" class="headerlink" title="3.3 改善"></a>3.3 改善</h5><blockquote><p>目前商用虚拟机都采用这种收集算法来回收<strong>新生代</strong>，由于新生代中的对象回收率很高，所以并不需要按照1：1的比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的 <em>Survivor</em> 空间，每次使用 <em>Eden</em> 空间和一块 <em>Survivor</em> 空间，回收时将 <em>Eden</em> 和 <em>Survivor</em> 中还存活的对象一次性复制到另外一块 <em>Survivor</em> 空间上，最后将 <em>Eden</em> 空间和 <em>Survivor</em> 空间清理掉，而当 <em>Survivor</em> 上的内存<strong>不够</strong>复制的时候，需要依赖其他内存（<strong>老年代</strong>）进行分配担保</p></blockquote><h4 id="4-标记-整理算法"><a href="#4-标记-整理算法" class="headerlink" title="4. 标记-整理算法"></a>4. 标记-整理算法</h4><h5 id="4-1-算法步骤"><a href="#4-1-算法步骤" class="headerlink" title="4.1 算法步骤"></a>4.1 算法步骤</h5><blockquote><p>将所有可回收对象进行标记，然后让所有存活对象往一端移动，然后清理掉端边界以外的内存</p></blockquote><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/jvm-标记整理算法.png" style="zoom:80%;"><h5 id="4-2-适用范围"><a href="#4-2-适用范围" class="headerlink" title="4.2 适用范围"></a>4.2 适用范围</h5><blockquote><p>根据这种回收算法的特点，<em>对象存活率越高，复制次数越多，算法效率越越低</em>，但是当存活率为<em>100%时，效率最高</em>，所以<strong>老年代</strong>一般不直接采用这种算法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql存储过程和函数</title>
      <link href="/2019/11/10/mysql-4%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/"/>
      <url>/2019/11/10/mysql-4%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、存储过程概述"><a href="#一、存储过程概述" class="headerlink" title="一、存储过程概述"></a>一、存储过程概述</h3><h4 id="1-什么是存储过程和函数"><a href="#1-什么是存储过程和函数" class="headerlink" title="1. 什么是存储过程和函数"></a>1. 什么是存储过程和函数</h4><blockquote><p>存储过程和函数是事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p></blockquote><h4 id="2-存储过程和函数的区别"><a href="#2-存储过程和函数的区别" class="headerlink" title="2. 存储过程和函数的区别"></a>2. 存储过程和函数的区别</h4><blockquote><p>存储过程和函数的区别在于函数必须有返回值，而存储过程没有，存储过程的参数可以使用 <em>IN、OUT、INOUT</em> 类型，而函数的参数只能是 <em>IN</em> 类型的。如果有函数从其他类型的数据库迁移到 <em>MySQL</em> ，那么就可能因此需要将函数改造成存储过程</p></blockquote><h4 id="3-为什么要用存储过程、函数"><a href="#3-为什么要用存储过程、函数" class="headerlink" title="3. 为什么要用存储过程、函数"></a>3. 为什么要用存储过程、函数</h4><blockquote><p>调用存储过程与直接执行 SQL 的效果是相同的，但是存储过程的好处在于处理逻辑都封装在数据库端，调用者不需要了解中间的处理逻辑，一旦处理逻辑发生变化，只需要修改存储过程即可，而对调用者的程序完全没有影响。</p></blockquote><h3 id="二、相关操作"><a href="#二、相关操作" class="headerlink" title="二、相关操作"></a>二、相关操作</h3><h4 id="1-用户权限"><a href="#1-用户权限" class="headerlink" title="1. 用户权限"></a>1. 用户权限</h4><blockquote><p>对存储过程或函数进行操作时，需要首先确认用户是否具有相应的权限</p></blockquote><ol><li><strong>创建</strong>存储过程或者函数需要 <strong><em>CREATE ROUTINE</em></strong> 权限</li><li><strong>修改或者删除</strong>存储过程或者函数需要 <strong><em>ALTER ROUTINE</em></strong> 权限</li><li><strong>执行</strong>存储过程或者函数需要 <strong><em>EXECUTE</em></strong> 权限</li></ol><h4 id="2-创建修改存储过程、函数"><a href="#2-创建修改存储过程、函数" class="headerlink" title="2. 创建修改存储过程、函数"></a>2. 创建修改存储过程、函数</h4><h5 id="2-1-创建、执行存储过程"><a href="#2-1-创建、执行存储过程" class="headerlink" title="2.1 创建、执行存储过程"></a>2.1 创建、执行存储过程</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 将结束符改为 $$</span><br><span class="line"><span class="meta">mysql&gt;</span> DELIMITER $$</span><br><span class="line"><span class="meta">#</span> 创建存储过程</span><br><span class="line"><span class="meta">#</span> IN 输入参数OUT 输出参数</span><br><span class="line"><span class="meta">mysql&gt;</span> CREATE PROCEDURE pro_test1(IN in_id INT,OUT out_num INT)</span><br><span class="line">    -&gt; BEGIN# sql语句块开始</span><br><span class="line">    -&gt; SELECT id ,name ,age FROM test1</span><br><span class="line">    -&gt; WHERE id = in_id;</span><br><span class="line">    -&gt; SELECT FOUND_ROWS() INTO out_num;</span><br><span class="line">    -&gt; END$$# sql语句块结束</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"><span class="meta">#</span> 将结束符改回 ；</span><br><span class="line"><span class="meta">mysql&gt;</span> DELIMITER ;</span><br><span class="line"><span class="meta">#</span> 执行存储过程</span><br><span class="line"><span class="meta">mysql&gt;</span> CALL pro_test1(1,@num);</span><br><span class="line">+----+---------+------+</span><br><span class="line">| id | name    | age  |</span><br><span class="line">+----+---------+------+</span><br><span class="line">|  1 | ccy_ccy |   12 |</span><br><span class="line">+----+---------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"><span class="meta">#</span> 查询存储过程输出参数</span><br><span class="line"><span class="meta">mysql&gt;</span> select @num;</span><br><span class="line">+------+</span><br><span class="line">| @num |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="2-2-修改存储过程"><a href="#2-2-修改存储过程" class="headerlink" title="2.2 修改存储过程"></a>2.2 修改存储过程</h5><blockquote><p>和视图的创建语法稍有不同，存储过程和函数的CREATE语法不支持使用CREATE OR REPLACE对存储过程和函数进行修改，如果需要对已有的存储过程或者函数进行修改，需要执行ALTER语法</p></blockquote><h5 id="2-3-创建函数"><a href="#2-3-创建函数" class="headerlink" title="2.3 创建函数"></a>2.3 创建函数</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改结束符</span></span><br><span class="line">mysql&gt; DELIMITER $$</span><br><span class="line"><span class="comment"># 创建函数</span></span><br><span class="line">mysql&gt; CREATE <span class="keyword">FUNCTION</span> fun_test1(in_id INT) RETURNS VARCHAR(<span class="number">10</span>)</span><br><span class="line">    -&gt; <span class="keyword">BEGIN</span></span><br><span class="line">    -&gt; DECLARE res_name varchar(<span class="number">10</span>);</span><br><span class="line">    -&gt; SELECT name INTO res_name FROM test1</span><br><span class="line">    -&gt; WHERE id=in_id;</span><br><span class="line">    -&gt; <span class="keyword">RETURN</span> res_name;</span><br><span class="line">    -&gt; <span class="keyword">END</span>$$</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.15</span> sec)</span><br><span class="line"><span class="comment"># 修改结束符</span></span><br><span class="line">mysql&gt; DELIMITER ;</span><br><span class="line"><span class="comment"># 像调用系统函数一样调用自定义函数</span></span><br><span class="line">mysql&gt; SELECT fun_test1(<span class="number">1</span>);</span><br><span class="line">+--------------+</span><br><span class="line">| fun_test1(<span class="number">1</span>) |</span><br><span class="line">+--------------+</span><br><span class="line">| ccy_ccy      |</span><br><span class="line">+--------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h5 id="2-4-修改函数"><a href="#2-4-修改函数" class="headerlink" title="2.4 修改函数"></a>2.4 修改函数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-5-删除存储过程或函数"><a href="#2-5-删除存储过程或函数" class="headerlink" title="2.5 删除存储过程或函数"></a>2.5 删除存储过程或函数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> DROP &#123;PROCEDURE|FUNCTION&#125; [IF EXISTS] name;</span><br><span class="line">DROP PROCEDURE pro_test1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="3-查看存储过程"><a href="#3-查看存储过程" class="headerlink" title="3. 查看存储过程"></a>3. 查看存储过程</h4><h5 id="3-1-查看存储过程或函数的状态"><a href="#3-1-查看存储过程或函数的状态" class="headerlink" title="3.1 查看存储过程或函数的状态"></a>3.1 查看存储过程或函数的状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 语法</span><br><span class="line"><span class="meta">#</span> SHOW &#123;PROCEDURE|FUNCTION&#125; STATUS [LIKE 'pattern'];</span><br><span class="line"><span class="meta">mysql&gt;</span> SHOW PROCEDURE STATUS like 'pro_test1';</span><br></pre></td></tr></table></figure><p><img src="F:%5Cstudy_note%5Cpicture%5Cpictures%5Cmysql-%E6%9F%A5%E7%9C%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%8A%B6%E6%80%81.png" alt></p><h5 id="3-2-查看定义"><a href="#3-2-查看定义" class="headerlink" title="3.2 查看定义"></a>3.2 查看定义</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 语法</span><br><span class="line"><span class="meta">#</span> SHOW CREATE &#123;PROCEDURE|FUNCTION&#125; name;</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> SHOW CREATE PROCEDURE pro_test1;</span><br><span class="line">+-----------+-------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</span><br><span class="line">| Procedure | sql_mode                                                                                                                                  | Create Procedure                                                                                                                                                                    | character_set_client | collation_connection | Database Collation |</span><br><span class="line">+-----------+-------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</span><br><span class="line">| pro_test1 | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION | CREATE DEFINER=`root`@`localhost` PROCEDURE `pro_test1`(IN in_id INT,OUT out_num INT)</span><br><span class="line">BEGIN</span><br><span class="line">SELECT id ,name ,age FROM test1</span><br><span class="line">WHERE id = in_id;</span><br><span class="line">SELECT FOUND_ROWS() INTO out_num;</span><br><span class="line">END | utf8                 | utf8_general_ci      | utf8_general_ci    |</span><br><span class="line">+-----------+-------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="3-3-通过information-Routines查看"><a href="#3-3-通过information-Routines查看" class="headerlink" title="3.3 通过information_Routines查看"></a>3.3 通过information_Routines查看</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM routines WHERE ROUTINE_NAME = 'pro_test1';</span><br></pre></td></tr></table></figure><h3 id="三、存储过程及函数基本语法"><a href="#三、存储过程及函数基本语法" class="headerlink" title="三、存储过程及函数基本语法"></a>三、存储过程及函数基本语法</h3><h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h4><h5 id="1-1-变量定义"><a href="#1-1-变量定义" class="headerlink" title="1.1 变量定义"></a>1.1 变量定义</h5><blockquote><p>通过 <strong><em>DECLARE</em></strong> 可以定义一个局部变量，该变量的作用范围只能在 <strong><em>BEGIN…END</em></strong> 块中，可以用在嵌套的块中。变量的定义必须写在复合语句的开头，并且在任何其他语句的前面。可以一次声明<strong>多个</strong>相同类型的变量。如果需要，可以使用 <em>DEFAULT</em> 赋默认值。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 语法</span><br><span class="line"><span class="meta">#</span> DECLARE v1 [v2,...,vn] type [DEFAULT value];</span><br><span class="line"><span class="meta">-&gt;</span> BEGIN</span><br><span class="line">...</span><br><span class="line"><span class="meta">-&gt;</span> DECLARE res_name varchar(10);</span><br><span class="line">...</span><br><span class="line"><span class="meta">-&gt;</span> END</span><br></pre></td></tr></table></figure><h5 id="1-2-变量赋值"><a href="#1-2-变量赋值" class="headerlink" title="1.2 变量赋值"></a>1.2 变量赋值</h5><blockquote><p>变量可以直接赋值，或者通过查询赋值。直接赋值使用 <strong><em>SET</em></strong>，可以赋常量或者赋表达式</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 直接赋值语法</span><br><span class="line"><span class="meta">#</span> SET v2 = expr [,v2 = expr2]...</span><br><span class="line"><span class="meta">#</span> 查询结果赋值,查询结果必须只有一行</span><br><span class="line"><span class="meta">#</span> SELECT col_1 [,col_2]... INTO v1 [,v2]... FROM tb_name [WHERE CONDITION];</span><br><span class="line"><span class="meta">#</span> 创建函数</span><br><span class="line"><span class="meta">mysql&gt;</span> CREATE FUNCTION declare_test(name varchar(10), id int) RETURNS INT</span><br><span class="line">    -&gt; BEGIN</span><br><span class="line">    # 创建变量</span><br><span class="line">    -&gt; DECLARE res_name varchar(10);</span><br><span class="line">    -&gt; DECLARE res_id INT;</span><br><span class="line">    # 赋值</span><br><span class="line">    -&gt; SET res_name=name;</span><br><span class="line">    -&gt; SET res_id=id;</span><br><span class="line">    -&gt; RETURN res_id;</span><br><span class="line">    -&gt; END $$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta">mysql&gt;</span> DELIMITER ;</span><br><span class="line"><span class="meta">#</span> 调用函数</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT declare_test('ccy',4);</span><br><span class="line">+-----------------------+</span><br><span class="line">| declare_test('ccy',4) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     4 |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2-条件定义和处理"><a href="#2-条件定义和处理" class="headerlink" title="2. 条件定义和处理"></a>2. 条件定义和处理</h4><blockquote><p>条件的定义和处理可以用来定义在处理过程中遇到问题时相应的处理步骤。</p></blockquote><h5 id="2-1-条件的定义"><a href="#2-1-条件的定义" class="headerlink" title="2.1. 条件的定义"></a>2.1. 条件的定义</h5> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> DECLARE condition_name CONDITION FOR condition_value</span><br><span class="line"><span class="meta">#</span> condition_value:</span><br><span class="line"><span class="meta">#</span> SQLSTATE [VALUE] sqlstate_value | mysql_error_code</span><br></pre></td></tr></table></figure><h5 id="2-2-条件的处理"><a href="#2-2-条件的处理" class="headerlink" title="2.2 条件的处理"></a>2.2 条件的处理</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> DECLARE handler_type HANDLER FOR condition_value[,. .] sp_statement</span><br><span class="line"><span class="meta">#</span> handler_type:</span><br><span class="line"><span class="meta">#</span> CONTINUE | EXIT | UNDO</span><br><span class="line"><span class="meta">#</span> condition_value:</span><br><span class="line"><span class="meta">#</span> SQLSTATE [VALUE] sqlstate_value | condition_name | SQLWARNING</span><br><span class="line"><span class="meta">#</span> | NOT FOUND | SQLEXCEPTION | mysql_error_code</span><br></pre></td></tr></table></figure><h4 id="3-光标的使用"><a href="#3-光标的使用" class="headerlink" title="3. 光标的使用"></a>3. 光标的使用</h4><blockquote><p>在存储过程和函数中，可以使用光标对结果集进行循环的处理。光标的使用包括光标的声明、<strong><em>OPEN、FETCH 和 CLOSE</em></strong></p></blockquote><h5 id="3-1-声明光标"><a href="#3-1-声明光标" class="headerlink" title="3.1 声明光标"></a>3.1 声明光标</h5><blockquote><p>DECLARE cursor_name CURSOR FOR select_statement</p></blockquote><h5 id="3-2-OPEN-光标"><a href="#3-2-OPEN-光标" class="headerlink" title="3.2 OPEN 光标"></a>3.2 OPEN 光标</h5><blockquote><p>OPEN cursor_name</p></blockquote><h5 id="3-3-FETCH-光标"><a href="#3-3-FETCH-光标" class="headerlink" title="3.3 FETCH 光标"></a>3.3 FETCH 光标</h5><blockquote><p>FETCH cursor_name INTO v_name[, v_name] …</p></blockquote><h5 id="3-4-CLOSE-光标"><a href="#3-4-CLOSE-光标" class="headerlink" title="3.4 CLOSE 光标"></a>3.4 CLOSE 光标</h5><blockquote><p>CLOSE cursor_name</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 创建存储过程</span><br><span class="line">CREATE PROCEDURE test_cursor(IN start_id INT, IN end_id INT, OUT all_names VARCHAR(100))</span><br><span class="line">BEGIN</span><br><span class="line">  DECLARE tmp_name VARCHAR(10);</span><br><span class="line">  # 声明光标</span><br><span class="line">  DECLARE cursor_test CURSOR FOR SELECT name FROM test1 </span><br><span class="line">  WHERE id BETWEEN start_id AND end_id;</span><br><span class="line">  # 条件处理</span><br><span class="line">  DECLARE EXIT HANDLER FOR NOT FOUND CLOSE cursor_test;</span><br><span class="line">  # 打开光标</span><br><span class="line">  OPEN cursor_test;</span><br><span class="line">  # 开始循环</span><br><span class="line">  REPEAT</span><br><span class="line">      FETCH cursor_test INTO tmp_name;</span><br><span class="line">      SELECT tmp_name;</span><br><span class="line">      SET all_names = CONCAT_WS(&apos;,&apos;,all_names,tmp_name);</span><br><span class="line">  UNTIL 0 END REPEAT;</span><br><span class="line">  CLOSE cursor_test;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 调用存储过程</span><br><span class="line">CALL test_cursor(1,10,@all_names);</span><br><span class="line"># 查询结果</span><br><span class="line">SELECT @all_names;</span><br></pre></td></tr></table></figure><h4 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4. 流程控制"></a>4. 流程控制</h4><h5 id="4-1-IF"><a href="#4-1-IF" class="headerlink" title="4.1 IF"></a>4.1 IF</h5><blockquote><p>IF实现条件判断，满足不同的条件执行不同的语句列表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line"># IF search_condition THEN statement_list</span><br><span class="line"># [ELSEIF search_condition THEN statement_list] . .</span><br><span class="line"># [ELSE statement_list]</span><br><span class="line"># END IF</span><br></pre></td></tr></table></figure><h5 id="4-2-CASE"><a href="#4-2-CASE" class="headerlink" title="4.2 CASE"></a>4.2 CASE</h5><blockquote><p>CASE实现比IF更复杂一些的条件构造</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line"># 第一种</span><br><span class="line"># CASE case_value</span><br><span class="line"># WHEN when_value THEN statement_list</span><br><span class="line"># [WHEN when_value THEN statement_list] . .</span><br><span class="line"># [ELSE statement_list]</span><br><span class="line"># END CASE</span><br><span class="line"># 第二种</span><br><span class="line"># CASE</span><br><span class="line"># WHEN search_condition THEN statement_list</span><br><span class="line"># [WHEN search_condition THEN statement_list] . .</span><br><span class="line"># [ELSE statement_list]</span><br><span class="line"># END CASE</span><br></pre></td></tr></table></figure><h5 id="4-3-LOOP"><a href="#4-3-LOOP" class="headerlink" title="4.3 LOOP"></a>4.3 LOOP</h5><blockquote><p>LOOP实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用LEAVE语句实现，</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># [begin_label:] LOOP</span><br><span class="line"># statement_list</span><br><span class="line"># END LOOP [end_label]</span><br><span class="line"># 如果不在statement_list中增加退出循环的语句，</span><br><span class="line"># 那么LOOP语句可以用来实现简单的死循环</span><br></pre></td></tr></table></figure><h5 id="4-4-LEAVE"><a href="#4-4-LEAVE" class="headerlink" title="4.4 LEAVE"></a>4.4 LEAVE</h5><blockquote><p>用来从标注的流程构造中退出，通常和 <em>BEGIN … END</em> 或者循环一起使用</p></blockquote><h5 id="4-5-ITERATE"><a href="#4-5-ITERATE" class="headerlink" title="4.5 ITERATE"></a>4.5 ITERATE</h5><blockquote><p><em>ITERATE</em> 语句必须用在循环中，作用是跳过当前循环的剩下的语句，直接进入下一轮循环</p></blockquote><h5 id="4-6-REPEAT"><a href="#4-6-REPEAT" class="headerlink" title="4.6 REPEAT"></a>4.6 REPEAT</h5><blockquote><p>有条件的循环控制语句，当满足条件的时候退出循环</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line"># [begin_label:] REPEAT</span><br><span class="line"># statement_list</span><br><span class="line"># UNTIL search_condition</span><br><span class="line"># END REPEAT [end_label]</span><br><span class="line"># search_condition 为 1 时结束循环</span><br></pre></td></tr></table></figure><h5 id="4-7-WHILE"><a href="#4-7-WHILE" class="headerlink" title="4.7 WHILE"></a>4.7 WHILE</h5><blockquote><p>WHILE 语句实现的也是有条件的循环控制语句，即当满足条件时执行循环的内容</p></blockquote><p><strong>注</strong> 与 repeat 区别，while 先判断后执行，repeat 先执行后判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line"># [begin_label:] WHILE search_condition DO</span><br><span class="line"># statement_list</span><br><span class="line"># END WHILE [end_label]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql视图</title>
      <link href="/2019/11/10/mysql-3%E8%A7%86%E5%9B%BE/"/>
      <url>/2019/11/10/mysql-3%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、视图概述"><a href="#一、视图概述" class="headerlink" title="一、视图概述"></a>一、视图概述</h3><h4 id="1-什么是视图"><a href="#1-什么是视图" class="headerlink" title="1. 什么是视图"></a>1. 什么是视图</h4><blockquote><p>视图（View）是一种虚拟存在的表，对视图于使用视图的用户来说基本上是透明的。视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。</p></blockquote><h4 id="2-视图优点"><a href="#2-视图优点" class="headerlink" title="2. 视图优点"></a>2. 视图优点</h4><h5 id="2-1-简单"><a href="#2-1-简单" class="headerlink" title="2.1 简单"></a>2.1 简单</h5><blockquote><p>使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。</p></blockquote><h5 id="2-2-安全"><a href="#2-2-安全" class="headerlink" title="2.2 安全"></a>2.2 安全</h5><blockquote><p>使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单地实现。</p></blockquote><h5 id="2-3-数据独立"><a href="#2-3-数据独立" class="headerlink" title="2.3 数据独立"></a>2.3 数据独立</h5><blockquote><p>一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</p></blockquote><h4 id="3-限制"><a href="#3-限制" class="headerlink" title="3. 限制"></a>3. 限制</h4><blockquote><p>在FROM关键字后面不能包含子查询，这和其他数据库是不同的，如果视图是从其他数据库迁移过来的，那么可能需要因此做一些改动，可以将子查询的内容先定义成一个视图，然后对该视图再创建视图就可以实现类似的功能了。</p></blockquote><h3 id="二、使用视图"><a href="#二、使用视图" class="headerlink" title="二、使用视图"></a>二、使用视图</h3><h4 id="1-创建或修改视图"><a href="#1-创建或修改视图" class="headerlink" title="1. 创建或修改视图"></a>1. 创建或修改视图</h4><h5 id="1-1-所需权限"><a href="#1-1-所需权限" class="headerlink" title="1.1 所需权限"></a>1.1 所需权限</h5><blockquote><p>创建视图需要有 <em>CREATE VIEW</em> 的权限，并且对于<strong>查询涉及的列有 <em>SELECT</em> <em>*权限。如果使用 *CREATE OR REPLACE 或者 ALTER</em> 修改视图，那么还需要该视图的 *</strong>DROP***权限。</p></blockquote><h5 id="1-2-创建视图"><a href="#1-2-创建视图" class="headerlink" title="1.2 创建视图"></a>1.2 创建视图</h5><ol><li><p>使用 CREATE 或 CREATE OR REPLACE 创建视图</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建视图语法</span><br><span class="line"><span class="meta">#</span> OR REPLACE 选项为视图存在则代替</span><br><span class="line"><span class="meta">#</span> CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]</span><br><span class="line"><span class="meta">#</span> VIEW view_name [(column_list)] AS select_statement</span><br><span class="line"><span class="meta">#</span> [WITH [CASCADED | LOCAL] CHECK OPTION]</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> CREATE OR REPLACE VIEW view_test1</span><br><span class="line">    -&gt; AS SELECT test1.id, test1.name name1, test2.name name2, age </span><br><span class="line">    -&gt; FROM test1,test2 WHERE test1.id=test2.id;</span><br><span class="line">Query OK, 0 rows affected (0.43 sec)</span><br></pre></td></tr></table></figure></li><li><p>使用 ALTER 修改视图</p><p><strong>注</strong> 视图无法重命名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ALTER [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]</span><br><span class="line"><span class="meta">#</span> VIEW view_name [(column_list)]</span><br><span class="line"><span class="meta">#</span> AS select_statement</span><br><span class="line"><span class="meta">#</span> [WITH [CASCADED | LOCAL] CHECK OPTION]</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> ALTER VIEW view_test1</span><br><span class="line">    -&gt; AS SELECT test2.id, test2.name name, age FROM test1,test2 </span><br><span class="line">    -&gt; WHERE test1.id=test2.id;</span><br><span class="line">Query OK, 0 rows affected (0.39 sec)</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-视图的可更新性与查询定义之间的关系"><a href="#2-视图的可更新性与查询定义之间的关系" class="headerlink" title="2. 视图的可更新性与查询定义之间的关系"></a>2. 视图的可更新性与查询定义之间的关系</h4><h5 id="2-1-可更新示例"><a href="#2-1-可更新示例" class="headerlink" title="2.1 可更新示例"></a>2.1 可更新示例</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> CREATE VIEW test1_view AS</span><br><span class="line">    -&gt; SELECT * FROM test1;</span><br><span class="line">Query OK, 0 rows affected (0.37 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1_view;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ccy1 |   12 |</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">|  3 | ccy  |   16 |</span><br><span class="line">|  4 | ccy  |   16 |</span><br><span class="line">| 10 | cc   |   10 |</span><br><span class="line">| 11 | ccy  |   12 |</span><br><span class="line">+----+------+------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> UPDATE test1_view SET name='ccy_ccy' WHERE id=1;</span><br><span class="line">Query OK, 1 row affected (0.43 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1_view;</span><br><span class="line">+----+---------+------+</span><br><span class="line">| id | name    | age  |</span><br><span class="line">+----+---------+------+</span><br><span class="line">|  1 | ccy_ccy |   12 |</span><br><span class="line">|  2 | ccy2    |   13 |</span><br><span class="line">|  3 | ccy     |   16 |</span><br><span class="line">|  4 | ccy     |   16 |</span><br><span class="line">| 10 | cc      |   10 |</span><br><span class="line">| 11 | ccy     |   12 |</span><br><span class="line">+----+---------+------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1;</span><br><span class="line">+----+---------+------+</span><br><span class="line">| id | name    | age  |</span><br><span class="line">+----+---------+------+</span><br><span class="line">|  1 | ccy_ccy |   12 |</span><br><span class="line">|  2 | ccy2    |   13 |</span><br><span class="line">|  3 | ccy     |   16 |</span><br><span class="line">|  4 | ccy     |   16 |</span><br><span class="line">| 10 | cc      |   10 |</span><br><span class="line">| 11 | ccy     |   12 |</span><br><span class="line">+----+---------+------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="2-2-包含以下-SQL-语句的视图是不可更新的"><a href="#2-2-包含以下-SQL-语句的视图是不可更新的" class="headerlink" title="2.2 包含以下 SQL 语句的视图是不可更新的"></a>2.2 包含以下 SQL 语句的视图是不可更新的</h5><blockquote><p>包含以下关键字的SQL语句：聚合函数（SUM、MIN、MAX、COUNT等）、DISTINCT、GROUP BY、HAVING、UNION或者UNION ALL。</p></blockquote><ol><li>包含聚合函数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> select * from view_fun;</span><br><span class="line">+-----+</span><br><span class="line">| num |</span><br><span class="line">+-----+</span><br><span class="line">|   5 |</span><br><span class="line">+-----+</span><br><span class="line">1 row in set (0.11 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> insert into test1 value(11,'ccy',12);</span><br><span class="line">Query OK, 1 row affected (0.21 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> select * from view_fun;</span><br><span class="line">+-----+</span><br><span class="line">| num |</span><br><span class="line">+-----+</span><br><span class="line">|   6 |</span><br><span class="line">+-----+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> UPDATE view_fun SET num=3;</span><br><span class="line">ERROR 1288 (HY000): The target table view_fun of the UPDATE is not updatable</span><br></pre></td></tr></table></figure><ol start="2"><li>常量视图</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建常量视图</span><br><span class="line"><span class="meta">mysql&gt;</span> CREATE VIEW PI AS SELECT 3.14 PI;</span><br><span class="line">Query OK, 0 rows affected (0.13 sec)</span><br><span class="line"><span class="meta">#</span> 更新数据报错</span><br><span class="line"><span class="meta">mysql&gt;</span> UPDATE PI SET PI=3.14159;</span><br><span class="line">ERROR 1288 (HY000): The target table PI of the UPDATE is not updatable</span><br></pre></td></tr></table></figure><ol start="3"><li>SELECT 中包含子查询</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> CREATE VIEW view_sub_select AS</span><br><span class="line">    -&gt; SELECT (SELECT name FROM test1 WHERE id=1);</span><br><span class="line">Query OK, 0 rows affected (0.39 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> select * from view_sub_select;</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| (SELECT name FROM test1 WHERE id=1) |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| ccy1                                |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">1 row in set (0.10 sec)</span><br></pre></td></tr></table></figure><ol start="4"><li>JOIN</li></ol><h4 id="3-删除视图"><a href="#3-删除视图" class="headerlink" title="3. 删除视图"></a>3. 删除视图</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> DROP VIEW [IF EXISTS] view_name [,view_name,...] [REDTRICT|CASCADE]</span><br><span class="line"><span class="meta">mysql&gt;</span> DROP VIEW IF EXISTS view_test1;</span><br><span class="line">Query OK, 0 rows affected (0.13 sec)</span><br></pre></td></tr></table></figure><h4 id="4-查看视图"><a href="#4-查看视图" class="headerlink" title="4. 查看视图"></a>4. 查看视图</h4><h5 id="4-1-SHOW-TABLES"><a href="#4-1-SHOW-TABLES" class="headerlink" title="4.1 SHOW TABLES"></a>4.1 SHOW TABLES</h5><blockquote><p>5.1 版本后，<em>SHOW TABLES</em> 不仅会显示表，也会显示视图</p></blockquote><p><img src="F:%5Cstudy_note%5Cpicture%5Cpictures%5Cmysql-%E6%9F%A5%E7%9C%8B%E8%A7%86%E5%9B%BE.png" alt="查看视图"></p><h5 id="4-2-SHOW-TABLE-STATUS"><a href="#4-2-SHOW-TABLE-STATUS" class="headerlink" title="4.2 SHOW TABLE STATUS"></a>4.2 SHOW TABLE STATUS</h5><blockquote><p>不仅会显示表信息，也会显示视图信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SHOW TABLE STATUS LIKE 'view_test1';</span><br><span class="line">+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+-------------+-------------+------------+-----------+----------+----------------+---------+</span><br><span class="line">| Name       | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time | Update_time | Check_time | Collation | Checksum | Create_options | Comment |</span><br><span class="line">+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+-------------+-------------+------------+-----------+----------+----------------+---------+</span><br><span class="line">| view_test1 | NULL   |    NULL | NULL       | NULL |           NULL |        NULL |            NULL |         NULL |      NULL |           NULL | NULL        | NULL        | NULL       | NULL      |     NULL | NULL           | VIEW    |</span><br><span class="line">+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+-------------+-------------+------------+-----------+----------+----------------+---------+</span><br><span class="line">1 row in set (0.13 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据类型</title>
      <link href="/2019/11/08/mysql-2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/11/08/mysql-2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、数值类型"><a href="#一、数值类型" class="headerlink" title="一、数值类型"></a>一、数值类型</h3><h4 id="1-整型"><a href="#1-整型" class="headerlink" title="1. 整型"></a>1. 整型</h4><table><thead><tr><th>类型</th><th>字节</th><th>范围（有符号）</th><th>范围（无符号）</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128~127</td><td>0~255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768~32767</td><td>0~65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608~8388607</td><td>0~1677215</td></tr><tr><td>INT、INTEGER</td><td>4</td><td>-2147483648~2147483647</td><td>0~4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808<br>~9223372036854775807</td><td>0~18446744073709551615</td></tr></tbody></table><h4 id="二、浮点数与定点数"><a href="#二、浮点数与定点数" class="headerlink" title="二、浮点数与定点数"></a>二、浮点数与定点数</h4><table><thead><tr><th>浮点数</th><th>字节</th><th>方范围</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h5 id="2-1-对比"><a href="#2-1-对比" class="headerlink" title="2.1 对比"></a>2.1 对比</h5><ol><li><p>浮点数(运算操作会损失精度)</p><blockquote><p>浮点数一般用于表示含有小数部分的数值。当一个字段被定义为浮点类型后，如果插入数据的精度超过该列定义的实际精度，则插入值会被四舍五入到实际定义的精度值，然后插入，四舍五入的过程不会报错。在 <em>MySQL</em> 中 <em>float、double（或 real）</em> 用来表示浮点数。</p></blockquote></li><li><p>定点数</p><blockquote><p>定点数不同于浮点数，定点数实际上是以<strong>字符串</strong>形式存放的，所以定点数可以更精确地保存数据。如果实际插入的数值精度大于实际定义的精度，则 <em>MySQL</em> 会进行警告（默认的 <em>SQLMode</em> 下），但是数据按照实际精度四舍五入后插入；如果 <em>SQLMode</em> 是在<em>TRADITIONAL</em>  （传统模式）下，则系统会直接报错，导致数据无法插入。在 <em>MySQL</em> 中，<em>decimal（或 numberic）</em>用来表示定点数。</p></blockquote></li></ol><h5 id="2-2-使用注意"><a href="#2-2-使用注意" class="headerlink" title="2.2 使用注意"></a>2.2 使用注意</h5><ol><li>浮点数存在误差问题</li><li>对货币等对精度敏感的数据，应该用定点数表示或存储</li><li>在编程中，如果用到浮点数，要特别注意误差问题，并尽量避免做浮点数比较</li><li>要注意浮点数中一些特殊值的处理</li></ol><h3 id="二、CHAR-与-VARCHAR"><a href="#二、CHAR-与-VARCHAR" class="headerlink" title="二、CHAR 与 VARCHAR"></a>二、<em>CHAR</em> 与 <em>VARCHAR</em></h3><blockquote><p><em>CHAR</em> 和 <em>VARCHAR</em> 类型类似，都用来存储字符串，但它们保存和检索的方式不同。<em>CHAR</em> 属于<strong>固定长度</strong>的字符类型，而 <em>VARCHAR</em> 属于<strong>可变长度</strong>的字符类型。</p></blockquote><h4 id="1-对比"><a href="#1-对比" class="headerlink" title="1. 对比"></a>1. 对比</h4><h5 id="1-1-空格处理"><a href="#1-1-空格处理" class="headerlink" title="1.1 空格处理"></a>1.1 空格处理</h5><blockquote><p><em>CHAR</em> 类型字符串尾部的<strong>空格自动去掉</strong>，中间和前缀空格不会被处理，当保存字符串尾部带空格是选择 <em>VARCHAR</em> </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test4 VALUES(' qwerty  ',' qwerty  ');</span><br><span class="line">Query OK, 1 row affected (0.13 sec)</span><br><span class="line"><span class="meta">#</span> CHAR 尾部空格被删除</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT c1,LENGTH(c1) c1_len,c2,LENGTH(c2) c2_len from test4;</span><br><span class="line">+---------+--------+-----------+--------+</span><br><span class="line">| c1      | c1_len | c2        | c2_len |</span><br><span class="line">+---------+--------+-----------+--------+</span><br><span class="line">|  qwerty |      7 |  qwerty   |      9 |</span><br><span class="line">+---------+--------+-----------+--------+</span><br><span class="line"><span class="meta">#</span> 拼接数据查看效果</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT CONCAT(c1,'--'),CONCAT(c2,'--') FROM test4;</span><br><span class="line">+-----------------+-----------------+</span><br><span class="line">| CONCAT(c1,'--') | CONCAT(c2,'--') |</span><br><span class="line">+-----------------+-----------------+</span><br><span class="line">|  qwerty--       |  qwerty  --     |</span><br><span class="line">+-----------------+-----------------+</span><br></pre></td></tr></table></figure><h5 id="1-2-优缺点"><a href="#1-2-优缺点" class="headerlink" title="1.2 优缺点"></a>1.2 优缺点</h5><ol><li><p>CHAR</p><blockquote><p>长度固定，处理速度快，但浪费内存，长度范围        </p></blockquote></li><li><p>VARCHAR</p><blockquote><p>长度可变，处理速度较 <em>CHAR</em> 慢，内存利用高</p></blockquote></li><li><p>选择</p><blockquote><p>当长度范围变化不大时或数据需要经常修改时使用 <em>CHAR*，当数据类型长度跨度较大且不常修改时使用 *VARCHAR</em> ,<em>VARCHAR</em> 类型修改后若长度增加，则会造成行迁移，导致 <em>I/O</em> 操作，影响性能</p></blockquote></li></ol><h4 id="2-不同存储引擎使用原则"><a href="#2-不同存储引擎使用原则" class="headerlink" title="2. 不同存储引擎使用原则"></a>2. 不同存储引擎使用原则</h4><h5 id="2-1-MyISAM"><a href="#2-1-MyISAM" class="headerlink" title="2.1 MyISAM"></a>2.1 MyISAM</h5><blockquote><p>建议使用固定长度的数据列代替可变长度的数据列。</p></blockquote><h5 id="2-2-MEMORY"><a href="#2-2-MEMORY" class="headerlink" title="2.2 MEMORY"></a>2.2 MEMORY</h5><blockquote><p><strong>目前都使用固定长度的数据行存储</strong>，因此无论使用 <em>CHAR</em> 或 <em>VARCHAR</em> 列都没有关系。两者都是作为 <em>CHAR</em> 类型处理。</p></blockquote><h5 id="2-3-InnoDB"><a href="#2-3-InnoDB" class="headerlink" title="2.3 InnoDB"></a>2.3 InnoDB</h5><blockquote><p>建议使用 <em>VARCHAR</em> 类型。对于 <em>InnoDB</em> 数据表，内部的行存储格式没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），因此在本质上，使用固定长度的 <em>CHAR</em> 列不一定比使用可变长度 <em>VARCHAR</em> 列性能要好。因而，主要的性能因素是数据行使用的存储总量。由于 <em>CHAR</em> 平均占用的空间多于 <em>VARCHAR</em> ，因此使用 <em>VARCHAR</em> 来最小化需要处理的数据行的存储总量和磁盘 <em>I/O</em> 是比较好的。</p></blockquote><h3 id="三、TEXT-与-BLOB"><a href="#三、TEXT-与-BLOB" class="headerlink" title="三、TEXT 与 BLOB"></a>三、<em>TEXT</em> 与 <em>BLOB</em></h3><blockquote><p>一般在保存<strong>少量字符串</strong>的时候，我们会选择 <em>CHAR</em> 或者 <em>VARCHAR</em> ；而在保存<strong>较大文本</strong>时，通常会选择使用 <em>TEXT</em> 或者 <em>BLOB</em> 。二者之间的主要差别是 <em>BLOB</em> 能用来保存<strong>二进制</strong>数据，文字和文件；而TEXT只能保存<strong>字符数据</strong>(文字)</p></blockquote><h4 id="1-删除造成的内存”空洞“"><a href="#1-删除造成的内存”空洞“" class="headerlink" title="1. 删除造成的内存”空洞“"></a>1. 删除造成的内存”空洞“</h4><h5 id="1-1-原因"><a href="#1-1-原因" class="headerlink" title="1.1 原因"></a>1.1 原因</h5><blockquote><p>删除操作会在数据表中留下很大的“空洞”，以后填入这些“空洞”的记录在插入的性能上会有影响。</p></blockquote><h5 id="1-2-优化"><a href="#1-2-优化" class="headerlink" title="1.2 优化"></a>1.2 优化</h5><blockquote><p>为了提高性能，建议定期使用 <strong><em>OPTIMIZE TABLE</em></strong> 功能对这类表进行碎片整理，避免因为“空洞”导致性能问题。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建测试表(MyISAM 引擎)</span><br><span class="line"><span class="meta">mysql&gt;</span>  CREATE TABLE `test5` (</span><br><span class="line"><span class="meta">  -&gt;</span> `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line"><span class="meta">  -&gt;</span> `detail` text,</span><br><span class="line"><span class="meta">  -&gt;</span> PRIMARY KEY (`id`)</span><br><span class="line"><span class="meta">-&gt;</span> ) ENGINE=MyISAM DEFAULT CHARSET=utf8</span><br><span class="line"><span class="meta">#</span> 重复插入数据数100次，插入后文件大小为48kb</span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test5(detail) VALUES(repeat("qwertyuiop",10));</span><br><span class="line">Query OK, 1 row affected (0.40 sec)</span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test5(detail) VALUES(repeat("qwertyuiop",100));</span><br><span class="line">Query OK, 1 row affected (0.40 sec)</span><br><span class="line"><span class="meta">#</span> 删除中间数据，删除后数据文件大小未减小</span><br><span class="line"><span class="meta">mysql&gt;</span> DELETE FROM test5 WHERE id &gt; 20 AND id&lt;40;</span><br><span class="line"><span class="meta">#</span> 对表进行优化操作，优化后大小未36kb</span><br><span class="line"><span class="meta">mysql&gt;</span> OPTIMIZE TABLE test5;</span><br><span class="line">+-------------------+----------+----------+----------+</span><br><span class="line">| Table             | Op       | Msg_type | Msg_text |</span><br><span class="line">+-------------------+----------+----------+----------+</span><br><span class="line">| learn_mysql.test5 | optimize | status   | OK       |</span><br><span class="line">+-------------------+----------+----------+----------+</span><br><span class="line">1 row in set (0.02 sec)</span><br></pre></td></tr></table></figure><h4 id="2-检索"><a href="#2-检索" class="headerlink" title="2. 检索"></a>2. 检索</h4><h5 id="2-1-合成索引"><a href="#2-1-合成索引" class="headerlink" title="2.1 合成索引"></a>2.1 合成索引</h5><blockquote><p>合成索引就是根据大文本字段的内容建立一个散列值，并把这个值存储在单独的数据列中，接下来就可以通过检索散列值找到数据行了。但是，要注意这种技术只能用于<strong><em>精确匹配</em></strong> 的查询（散列值对于类似“&lt;”或“&gt;=”等范围搜索操作符是没有用处的）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 建汉合成索引的表</span><br><span class="line"><span class="meta">mysql&gt;</span> CREATE TABLE `test5` (</span><br><span class="line"><span class="meta">  -&gt;</span> `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line"><span class="meta">  -&gt;</span> `detail` text,</span><br><span class="line"><span class="meta">  -&gt;</span> `md5_val` varchar(50) DEFAULT NULL,</span><br><span class="line"><span class="meta">  -&gt;</span> PRIMARY KEY (`id`)</span><br><span class="line"><span class="meta">-&gt;</span> ) ENGINE=MyISAM DEFAULT CHARSET=utf8</span><br><span class="line"><span class="meta">#</span> 重复多次插入数据</span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test5(detail,md5_val) VALUE(repeat('huhu',10),MD5(detail));</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test5(detail,md5_val) VALUE(repeat('haha',10),MD5(detail));</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test5(detail,md5_val) VALUE(repeat('xixi',10),MD5(detail));</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test5(detail,md5_val) VALUE(repeat('hehe',10),MD5(detail));</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 根据文本内容查询，耗时0.1s</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test5 WHERE detail=repeat('huhu',10);</span><br><span class="line"><span class="meta">#</span> 省略查询结果</span><br><span class="line">11 rows in set (0.10 sec)</span><br><span class="line"><span class="meta">#</span> 根据合成索引查询，耗时忽略不计</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test5 WHERE md5_val=MD5(repeat('huhu',10));</span><br><span class="line"><span class="meta">#</span> 省略查询结果</span><br><span class="line">11 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="2-2-前缀索引"><a href="#2-2-前缀索引" class="headerlink" title="2.2 前缀索引"></a>2.2 前缀索引</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建前缀索引</span><br><span class="line"><span class="meta">mysql&gt;</span> CREATE INDEX idx_detail ON test5(detail(50));</span><br><span class="line">Query OK, 65 rows affected (0.15 sec)</span><br><span class="line">Records: 65  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/mysql-%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95.png" alt="mysql-前缀索引"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 模糊查询</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test5 WHERE detail LIKE 'i am ccy%';</span><br><span class="line">+-----+----------------------------------------------------------------------------------+----------------------------------+</span><br><span class="line">| id  | detail                                                                           | md5_val                          |</span><br><span class="line">+-----+----------------------------------------------------------------------------------+----------------------------------+</span><br><span class="line">| 151 | i am ccyi am ccyi am ccyi am ccyi am ccyi am ccyi am ccyi am ccyi am ccyi am ccy | 7156ed4126f8fb4ee15fa71d84b9814f |</span><br><span class="line">| 174 | i am ccyi am ccyi am ccyi am ccyi am ccyi am ccyi am ccyi am ccyi am ccyi am ccy | 7156ed4126f8fb4ee15fa71d84b9814f |</span><br><span class="line">+-----+----------------------------------------------------------------------------------+----------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="2-3-优化查询"><a href="#2-3-优化查询" class="headerlink" title="2.3 优化查询"></a>2.3 优化查询</h5><ol><li><p>避免检索大型的BLOB或TEXT值</p><blockquote><p>SELECT *  查询就不是很好的想法，除非能够确定作为约束条件的 <em>WHERE</em> 子句只会找到所需要的数据行。否则，很可能毫无目的地在网络上传输大量的值。可以将一些特征数据放在索引列，根据特征数据确定范围时候再对 <em>BOLO</em> 和 <em>TEXT</em> 进行检索</p></blockquote></li><li><p>把BLOB或TEXT列分离到单独的表中</p><blockquote><p>在某些环境中，如果把这些数据列移动到第二张数据表中，可以把原数据表中的数据列转换为固定长度的数据行格式，那么它就是有意义的。这会减少主表中的碎片，可以得到固定长度数据行的性能优势。它还可以使主数据表在运行 SELECT * 查询的时候不会通过网络传输大量的 <em>BLOB</em> 或 <em>TEXT</em> 值。</p></blockquote></li></ol><h3 id="四、日期类型"><a href="#四、日期类型" class="headerlink" title="四、日期类型"></a>四、日期类型</h3><h4 id="1-对比-1"><a href="#1-对比-1" class="headerlink" title="1. 对比"></a>1. 对比</h4><table><thead><tr><th>类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>YEAR</td><td>1</td><td>1901 ~ 2155</td></tr><tr><td>DATE</td><td>4</td><td>1000-01-01 ~ 9999-12-31</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970010108001 ~ 2038年的某个时刻</td></tr><tr><td>TIEM</td><td>3</td><td>-838:59:59 ~ 838:59:59</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql存储引擎</title>
      <link href="/2019/11/02/mysql-5%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2019/11/02/mysql-5%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="一、MySQL存储引擎概述"><a href="#一、MySQL存储引擎概述" class="headerlink" title="一、MySQL存储引擎概述"></a>一、MySQL存储引擎概述</h3><blockquote><p>插件式存储引擎是MySQL数据库最重要的特性之一，用户可以根据应用的需要选择如何存储和索引数据、是否使用事务等。</p></blockquote><h4 id="1-MySQL支持"><a href="#1-MySQL支持" class="headerlink" title="1. MySQL支持"></a>1. MySQL支持</h4><blockquote><p>MySQL 5.0支持的存储引擎包括MyISAM、InnoDB、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中 InnoDB和BDB提供事务安全表，其他存储引擎都是非事务安全表。</p></blockquote><h4 id="2-默认存储引擎"><a href="#2-默认存储引擎" class="headerlink" title="2. 默认存储引擎"></a>2. 默认存储引擎</h4><blockquote><p>MySQL 5.5之前的的默认存储引擎是MyISAM，5.5之后改为了InnoDB</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看存储引擎</span><br><span class="line"><span class="meta">mysql&gt;</span> show engines;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/mysql-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%88%97%E8%A1%A8.png" alt="MySQL存储引擎"></p><h4 id="3-使用存储引擎"><a href="#3-使用存储引擎" class="headerlink" title="3. 使用存储引擎"></a>3. 使用存储引擎</h4><h5 id="3-1-创建表时指定存储引擎"><a href="#3-1-创建表时指定存储引擎" class="headerlink" title="3.1 创建表时指定存储引擎"></a>3.1 创建表时指定存储引擎</h5><blockquote><p>增加ENGINE关键字设置新建表的存储引擎</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> CREATE TABLE test_engine(</span><br><span class="line">    -&gt; id int NOT NULL,</span><br><span class="line">    -&gt; name char(10) NOT NULL,</span><br><span class="line">    -&gt; birthday date NULL)</span><br><span class="line">    -&gt; ENGINE=MyISAM;</span><br><span class="line">Query OK, 0 rows affected (0.46 sec)</span><br></pre></td></tr></table></figure><h5 id="3-2-查看表使用的存储引擎"><a href="#3-2-查看表使用的存储引擎" class="headerlink" title="3.2 查看表使用的存储引擎"></a>3.2 查看表使用的存储引擎</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SHOW CREATE TABLE test_engine;</span><br><span class="line">+-------------+------------------------------------------------------------+</span><br><span class="line">| Table       | Create Table                                               |</span><br><span class="line">+-------------+------------------------------------------------------------+</span><br><span class="line">| test_engine | CREATE TABLE `test_engine` (</span><br><span class="line">                  `id` int(11) NOT NULL,</span><br><span class="line">                  `name` char(10) NOT NULL,</span><br><span class="line">                  `birthday` date DEFAULT NULL</span><br><span class="line">                ) ENGINE=MyISAM DEFAULT CHARSET=utf8 |</span><br><span class="line">+-------------+------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="3-3-修改表存储引擎"><a href="#3-3-修改表存储引擎" class="headerlink" title="3.3 修改表存储引擎"></a>3.3 修改表存储引擎</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 将存储引擎由MyISAM修改为Innodb</span><br><span class="line"><span class="meta">mysql&gt;</span>  ALTER TABLE test_engine ENGINE=Innodb;</span><br><span class="line">Query OK, 0 rows affected (0.84 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"><span class="meta">#</span> 查看修改结果</span><br><span class="line"><span class="meta">mysql&gt;</span> SHOW CREATE TABLE test_engine;</span><br><span class="line">+-------------+------------------------------------------------------------+</span><br><span class="line">| Table       | Create Table                                               |</span><br><span class="line">+-------------+------------------------------------------------------------+</span><br><span class="line">| test_engine | CREATE TABLE `test_engine` (</span><br><span class="line">                  `id` int(11) NOT NULL,</span><br><span class="line">                  `name` char(10) NOT NULL,</span><br><span class="line">                  `birthday` date DEFAULT NULL</span><br><span class="line">                ) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+-------------+------------------------------------------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="二、存储引擎特性"><a href="#二、存储引擎特性" class="headerlink" title="二、存储引擎特性"></a>二、存储引擎特性</h3><table><thead><tr><th align="center">特点</th><th align="center">MyISAM</th><th align="center">InnoDB</th><th align="center">MEMORY</th><th align="center">MERGE</th><th align="center">NDB</th></tr></thead><tbody><tr><td align="center">存储限制</td><td align="center">有</td><td align="center">64TB</td><td align="center">有</td><td align="center">无</td><td align="center">有</td></tr><tr><td align="center">事务安全</td><td align="center"></td><td align="center">支持</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">锁机制</td><td align="center">表锁</td><td align="center">行锁</td><td align="center">表锁</td><td align="center">表锁</td><td align="center">行锁</td></tr><tr><td align="center">B树索引</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">哈希索引</td><td align="center"></td><td align="center"></td><td align="center">支持</td><td align="center"></td><td align="center">支持</td></tr><tr><td align="center">全文索引</td><td align="center">支持</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">集群索引</td><td align="center"></td><td align="center">支持</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">数据缓存</td><td align="center"></td><td align="center">支持</td><td align="center">支持</td><td align="center"></td><td align="center">支持</td></tr><tr><td align="center">索引缓存</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">数据可压缩</td><td align="center">支持</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">空间使用</td><td align="center">低</td><td align="center">高</td><td align="center">N/A</td><td align="center">低</td><td align="center">低</td></tr><tr><td align="center">内存使用</td><td align="center">低</td><td align="center">高</td><td align="center">中</td><td align="center">低</td><td align="center">高</td></tr><tr><td align="center">批量插入速度</td><td align="center">高</td><td align="center">低</td><td align="center">高</td><td align="center">高</td><td align="center">高</td></tr><tr><td align="center">支持外键</td><td align="center"></td><td align="center">支持</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="1-MyISAM"><a href="#1-MyISAM" class="headerlink" title="1. MyISAM"></a>1. MyISAM</h4><blockquote><p><em>MyISAM</em> 是 <em>MySQL 5.5</em> 之前默认的存储引擎，<strong>不支持事务，也不支持外键</strong> 。优点是访问速度快，对事务完整性没有要求或者以 <em>SELECT</em> 、<em>INSERT</em> 为主的应用基本上都可以使用这个存储引擎来创建表</p></blockquote><h5 id="1-1-创建使用MyISAM的表"><a href="#1-1-创建使用MyISAM的表" class="headerlink" title="1.1 创建使用MyISAM的表"></a>1.1 创建使用MyISAM的表</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SHOW CREATE TABLE test2;</span><br><span class="line">+-------+------------------------------------------------------------------+</span><br><span class="line">| Table | Create Table                                                     |</span><br><span class="line">+-------+------------------------------------------------------------------+</span><br><span class="line">| test2 | CREATE TABLE `test2` (</span><br><span class="line">            `id` int(11) NOT NULL,</span><br><span class="line">            `name` char(10) DEFAULT NULL</span><br><span class="line">          ) ENGINE=MyISAM DEFAULT CHARSET=utf8 |</span><br><span class="line">+-------+------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="1-2-存储结构"><a href="#1-2-存储结构" class="headerlink" title="1.2 存储结构"></a>1.2 存储结构</h5><blockquote><p>每一个使用 <em>MyISAM</em> 创建的表都会在磁盘上生成3个文件</p></blockquote><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/mysql-MyISAM%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt></p><ol><li><p>文件相关</p><ul><li>table_name.frm（存储表的定义）</li><li>table_name.MYD（MYDATA，存储数据）</li><li>table_name.MYI（MYIndex,  存储索引）</li></ul></li><li><p>优点</p><blockquote><p>可以在不同服务器上拷贝数据文件和索引文件，以获得更高效的 <em>IO</em> </p></blockquote></li></ol><h5 id="1-3-存储格式"><a href="#1-3-存储格式" class="headerlink" title="1.3 存储格式"></a>1.3 存储格式</h5><ol><li><p>静态表（默认）</p><blockquote><p>静态表中的字段都是非变长字段，每个记录都是固定长度的，每个记录末尾的空格在返回时会被去掉</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 插入数据</span><br><span class="line"><span class="meta">mysql&gt;</span> insert into test2 values(1,"ccy  "),(2,"  ccy");</span><br><span class="line">Query OK, 2 rows affected (0.44 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"><span class="meta">#</span> 查询插入存储数据长度，丢失尾部空格</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT name,length(name) from test2;</span><br><span class="line">+-------+--------------+</span><br><span class="line">| name  | length(name) |</span><br><span class="line">+-------+--------------+</span><br><span class="line">| ccy   |            3 |</span><br><span class="line">|   ccy |            5 |</span><br><span class="line">+-------+--------------+</span><br><span class="line">2 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><blockquote><p>存储迅速，易于缓存，出现故障容易恢复</p></blockquote></li><li><p>缺点</p><blockquote><p>占用空间比动态表多，造成部分空间浪费</p></blockquote></li></ul></li><li><p>动态表</p><blockquote><p>包含边长字段，记录不是固定长度的</p></blockquote><ul><li><p>优点</p><blockquote><p>占用空间相对较少</p></blockquote></li><li><p>缺点</p><blockquote><p>频繁地更新和删除记录会产生碎片，需要定期执行OPTIMIZE TABLE语句或myisamchk -r 命令来改善性能，并且在出现故障时恢复相对比较困难。</p></blockquote></li></ul></li><li><p>压缩表</p><blockquote><p>压缩表由myisampack工具创建，占据非常小的磁盘空间。因为每个记录是被单独压缩的，所以只有非常小的访问开支</p></blockquote></li></ol><h4 id="2-InnoDB"><a href="#2-InnoDB" class="headerlink" title="2. InnoDB"></a>2. InnoDB</h4><blockquote><p><em>InnoDB</em> 存储引擎是5.5版本之后的默认存储引擎，提供了具有提交、回滚和崩溃恢复能力的事务安全。但是对比 <em>MyISAM</em> 的存储引擎，<em>InnoDB</em> <strong>写</strong>的处理效率<strong>差</strong>一些，并且会占用<strong>更多的磁盘空间</strong>以保留数据和索引。</p></blockquote><h5 id="2-1-自动增长-auto-increment"><a href="#2-1-自动增长-auto-increment" class="headerlink" title="2.1 自动增长(auto_increment)"></a>2.1 自动增长(auto_increment)</h5><blockquote><p><em>InnoDB</em> 表的自动增长列可以手工插入，但是插入的值如果是空或者 0，则实际插入的将是自动增长后的值。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建带自动增长列的表</span><br><span class="line"><span class="meta">mysql&gt;</span> show create table test3;</span><br><span class="line">+-------+---------------------------------------------------------------+</span><br><span class="line">| Table | Create Table                                                  |</span><br><span class="line">+-------+---------------------------------------------------------------+</span><br><span class="line">| test3 | CREATE TABLE `test3` (</span><br><span class="line">            `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">            `name` char(10) DEFAULT NULL,</span><br><span class="line">            PRIMARY KEY (`id`)</span><br><span class="line">          ) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+-------+---------------------------------------------------------------+</span><br><span class="line">1 row in set (0.10 sec)</span><br></pre></td></tr></table></figure><blockquote><p>设置初始值，强制的默认值是保留在内存中的，如果该值在使用之前数据库重新启动，那么这个强制的默认值就会丢失，就需要在数据库启动以后重新设置。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 设置自动增长初始值</span><br><span class="line"><span class="meta">mysql&gt;</span> ALTER TABLE test3 AUTO_INCREMENT=10;</span><br><span class="line">Query OK, 0 rows affected (0.40 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"><span class="meta">#</span> 插入数据并查询是否生效</span><br><span class="line"><span class="meta">mysql&gt;</span> insert into test3(name) value('ccy');</span><br><span class="line">Query OK, 1 row affected (0.12 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test3;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">| 10 | ccy  |</span><br><span class="line">+----+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>使用LAST_INSERT_ID()查询当前线程最后插入记录使用的值。如果一次插入了多条记录，那么返回的是第一条记录使用的自动增长</p></blockquote><h5 id="2-2-事务"><a href="#2-2-事务" class="headerlink" title="2.2 事务"></a>2.2 事务</h5><blockquote><p>事务的介绍和性质请移步 <a href>mysql之事务机制</a></p></blockquote><ol><li>简单使用</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询所有记录</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1;</span><br><span class="line">Empty set (0.01 sec)</span><br><span class="line"><span class="meta">#</span> 开启事务</span><br><span class="line"><span class="meta">mysql&gt;</span> BEGIN;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 插入数据</span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test1 VALUES (1,'ccy1'),(2,'ccy2');</span><br><span class="line">ERROR 1136 (21S01): Column count doesn't match value count at row 1</span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test1 VALUES (1,'ccy1','12'),(2,'ccy2','13');</span><br><span class="line">Query OK, 2 rows affected (0.12 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"><span class="meta">#</span> 查询所有数据</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ccy1 |   12 |</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">+----+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 回滚</span><br><span class="line"><span class="meta">mysql&gt;</span> rollback;</span><br><span class="line">Query OK, 0 rows affected (0.13 sec)</span><br><span class="line"><span class="meta">#</span> 查询，回滚之后数据插入失败</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 插入</span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test1 VALUES (1,'ccy1','12'),(2,'ccy2','13');</span><br><span class="line">Query OK, 2 rows affected (0.15 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"><span class="meta">#</span> 提交事务</span><br><span class="line"><span class="meta">mysql&gt;</span> COMMIT;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 查询，提交成功</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ccy1 |   12 |</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">+----+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ol start="2"><li>安全点</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 开启事务</span><br><span class="line"><span class="meta">mysql&gt;</span> BEGIN;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test1 VALUES (3,'ccy',16);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 在此处设置安全点</span><br><span class="line"><span class="meta">mysql&gt;</span> SAVEPOINT test1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test1 VALUES (4,'ccy',17);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ccy1 |   12 |</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">|  3 | ccy  |   16 |</span><br><span class="line">|  4 | ccy  |   17 |</span><br><span class="line">+----+------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 回滚至某一安全点</span><br><span class="line"><span class="meta">mysql&gt;</span> ROLLBACK TO test1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 提交</span><br><span class="line"><span class="meta">mysql&gt;</span> COMMIT;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ccy1 |   12 |</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">|  3 | ccy  |   16 |</span><br><span class="line">+----+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="2-3-外键"><a href="#2-3-外键" class="headerlink" title="2.3 外键"></a>2.3 外键</h5><blockquote><p>外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。</p></blockquote><ol><li><p>指定删除更新父表时子表的相应操作</p><ul><li><p>RESTRICT</p><blockquote><p>限制在子表有关联记录的情况下父表不能更新</p></blockquote></li><li><p>CASCADE</p><blockquote><p>父表在更新或者删除时，更新或者删除子表对应记录</p></blockquote></li><li><p>SET NULL</p><blockquote><p>表示父表在更新或者删除的时候，子表的对应字段被 SET NULL</p></blockquote></li><li><p>NO ACTION</p><blockquote><p>同 <em>RESTRICT</em> ，限制在子表有关联记录的情况下父表不能更新</p></blockquote></li></ul></li></ol><h5 id="2-4-存储方式"><a href="#2-4-存储方式" class="headerlink" title="2.4 存储方式"></a>2.4 存储方式</h5><ol><li><p>共享表存储</p><blockquote><p>表结构保存在.frm文件中，数据和索引保存在innodb_data_home_dir 和innodb_data_file_path定义的表空间中，可以是多个文件。</p></blockquote></li><li><p>多表空间存储</p><blockquote><p>这种方式创建的表的表结构仍然保存在.frm文件中，但是每个表的数据和索引单独保存在.ibd 中。如果是个分区表，则每个分区对应单独的.ibd 文件，文件名是“表名+分区名”，可以在创建分区的时候指定每个分区的数据文件的位置，以此来将表的IO均匀分布在多个磁盘上</p></blockquote><ul><li><p>使用</p><blockquote><p>设置参数 <em>innodb_file_per_table</em> ，并且<strong>重新启动</strong>服务后才可以使用。多表空间参数生效期间，创建的表属于多表空间表，其他的表仍为共享表，<u>已存在的表的访问方式不会更改</u></p></blockquote></li><li><p>数据文件无大小限制</p></li><li><p>单表恢复备份较容易</p><blockquote><p>因为没有共享表空间的数据字典信息，直接复制的.ibd文件和.frm文件恢复时是不能被正确识别</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 通过以下命令进行恢复</span><br><span class="line">ALTER TABLE table_name DISCARD TABLESPACE;</span><br><span class="line">ALTER TABLE tanle_name IMPORT TABLESPACE;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="3-MEMORY"><a href="#3-MEMORY" class="headerlink" title="3. MEMORY"></a>3. MEMORY</h4><blockquote><p><em>MEMORY</em> 存储引擎使用存在于内存中的内容来创建表。每个<em>MEMORY</em> 表只实际对应一个磁盘文件，格式是.frm。MEMORY类型的表访问非常地快，因为它的<strong><em>数据是放在内存中的，并且默认使用HASH索引</em></strong>，但是一旦<strong>服务关闭</strong>，<strong>表中的数据就会丢失掉</strong> 。</p></blockquote><h4 id="4-MERGE"><a href="#4-MERGE" class="headerlink" title="4. MERGE"></a>4. MERGE</h4><blockquote><p><em>MERGE</em> 存储引擎是一组 <em>MyISAM</em> 表的组合，这些 <em>MyISAM</em> 表必须结构完全相同，<em>MERGE</em> 表本身并没有数据，对 <em>MERGE</em> 类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的 <em>MyISAM</em> 表进行的。</p></blockquote><h5 id="4-1-插入"><a href="#4-1-插入" class="headerlink" title="4.1 插入"></a>4.1 插入</h5><blockquote><p>对于MERGE类型表的插入操作，是通过INSERT_METHOD子句定义插入的表，可以有3个不同的值，使用FIRST或LAST值使得插入操作被相应地作用在第一或最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作。</p></blockquote><h5 id="4-2-删除"><a href="#4-2-删除" class="headerlink" title="4.2 删除"></a>4.2 删除</h5><blockquote><p>可以对MERGE表进行DROP操作，这个操作只是删除MERGE的定义，对内部的表没有任何的影响</p></blockquote><h5 id="4-3-存储结构"><a href="#4-3-存储结构" class="headerlink" title="4.3 存储结构"></a>4.3 存储结构</h5><ul><li><p>table_name.frm</p><blockquote><p>存储表定义</p></blockquote></li><li><p>table_name.MRG</p><blockquote><p>存储组合表信息，包括 <em>MERGE</em> 表由哪些表组成、插入新的数据时的依据。可以通过修改 <em>.MRG</em> 文件来修改MERGE表，但是修改后要通过 <em>FLUSH TABLES</em> 刷新。</p></blockquote></li></ul><h5 id="4-4-使用"><a href="#4-4-使用" class="headerlink" title="4.4 使用"></a>4.4 使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建使用MyISAM的两个表</span><br><span class="line"><span class="meta">mysql&gt;</span> CREATE TABLE test_merge1(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name char(10)</span><br><span class="line">    -&gt; )engine=MyISAM;</span><br><span class="line">Query OK, 0 rows affected (0.35 sec)</span><br><span class="line"><span class="meta">mysql&gt;</span> CREATE TABLE test_merge2(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name char(10)</span><br><span class="line">    -&gt; )engine=MyISAM;</span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br><span class="line"><span class="meta">#</span> 使用MERGE将两个表合并</span><br><span class="line"><span class="meta">mysql&gt;</span> CREATE TABLE test_merge_all(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name char(10)</span><br><span class="line">    -&gt; )ENGINE=MERGE UNIOn=(test_merge1,test_merge2);</span><br><span class="line">Query OK, 0 rows affected (0.14 sec)</span><br><span class="line"><span class="meta">#</span> 分别向两个表插入数据</span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test_merge1 values(1,"ccy_test1");</span><br><span class="line">Query OK, 1 row affected (0.37 sec)</span><br><span class="line"><span class="meta">mysql&gt;</span> INSERT INTO test_merge2 values(2,"ccy_test2");</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 查询总表</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test_merge_all;</span><br><span class="line">+------+-----------+</span><br><span class="line">| id   | name      |</span><br><span class="line">+------+-----------+</span><br><span class="line">|    1 | ccy_test1 |</span><br><span class="line">|    2 | ccy_test2 |</span><br><span class="line">+------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="三、存储引擎使用环境"><a href="#三、存储引擎使用环境" class="headerlink" title="三、存储引擎使用环境"></a>三、存储引擎使用环境</h3><h4 id="1-MyISAM-1"><a href="#1-MyISAM-1" class="headerlink" title="1. MyISAM"></a>1. MyISAM</h4><blockquote><p>5.5 前默认的 <em>MySQL</em> 插件式存储引擎。如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常适合的。<em>MyISAM</em> 是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。</p></blockquote><h4 id="2-InnoDB-1"><a href="#2-InnoDB-1" class="headerlink" title="2. InnoDB"></a>2. InnoDB</h4><blockquote><p>用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包括很多的更新、删除操作，那么 <em>InnoDB</em> 存储引擎应该是比较合适的选择。<em>InnoDB</em> 存储引擎除了有效地降低由于删除和更新导致的锁定，还可以确保事务的完整提交（Commit）和回滚（Rollback），对于类似计费系统或者财务系统等对数据准确性要求比较高的系统，<em>InnoDB</em> 都是合适的选择。</p></blockquote><h4 id="3-MEMORY-1"><a href="#3-MEMORY-1" class="headerlink" title="3. MEMORY"></a>3. MEMORY</h4><blockquote><p>将所有数据保存在 <em>RAM</em> 中，在需要快速定位记录和其他类似数据的环境下，可提供极快的访问。<em>MEMORY</em> 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。<em>MEMORY</em> 表通常用于更新不太频繁的小表，用以快速得到访问结果。</p></blockquote><h4 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h4><blockquote><p>用于将一系列等同的 <em>MyISAM</em> 表以逻辑方式组合在一起，并作为一个对象引用它们。MERGE表的优点在于可以突破对单个 <em>MyISAM</em> 表大小的限制，并且通过将不同的表分布在多个磁盘上，可以有效地改善 <em>MERGE</em> 表的访问效率。这对于诸如数据仓储等 <em>VLDB</em> 环境十分适合。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/"/>
      <url>/2019/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><blockquote><p>由于计算机体系是由16位开始扩展的，术语 <strong><em>“ 字 ”</em></strong> 表示16位数据类型，32位为 <strong><em>“ 双字 ”</em></strong> ，64位为 <strong><em>“ 四字 ”</em></strong>。</p></blockquote><h3 id="一、访问信息（以x86-64为例）"><a href="#一、访问信息（以x86-64为例）" class="headerlink" title="一、访问信息（以x86-64为例）"></a>一、访问信息（以x86-64为例）</h3><blockquote><p>中央处理器包含一组16个存储64位值的通用目的寄存器，用来存储整数数据和指针</p></blockquote><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-x86-64%E5%AF%84%E5%AD%98%E5%99%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="x86-64寄存器示意图.png"></p><h4 id="1-数据存储规则"><a href="#1-数据存储规则" class="headerlink" title="1. 数据存储规则"></a>1. 数据存储规则</h4><ul><li>生成1、2字节数据时，剩下的字节保持不变</li><li>生成4字节时高位4字节全部置0</li></ul><h4 id="2-操作数"><a href="#2-操作数" class="headerlink" title="2. 操作数"></a>2. 操作数</h4><h5 id="2-1-立即数"><a href="#2-1-立即数" class="headerlink" title="2.1 立即数"></a>2.1 立即数</h5><blockquote><p>用来表示常数值</p></blockquote><h5 id="2-2-寄存器"><a href="#2-2-寄存器" class="headerlink" title="2.2 寄存器"></a>2.2 寄存器</h5><blockquote><p>表示某个寄存器的内容，寄存器的低位1、2、4、8字节中的一个作为操作数</p></blockquote><h5 id="2-3-内存引用"><a href="#2-3-内存引用" class="headerlink" title="2.3 内存引用"></a>2.3 内存引用</h5><blockquote><p>会根据计算出来的内存地址访问某个内存位置                                                       </p></blockquote><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%BC%E5%BC%8F.png" alt="操作数格式"></p><h4 id="3-数据传送指令"><a href="#3-数据传送指令" class="headerlink" title="3. 数据传送指令"></a>3. 数据传送指令</h4><blockquote><p>将数据从一个位置复制到另一个位置</p></blockquote><table><thead><tr><th>指令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>MOV    src, dest</td><td>dest  &lt;- src</td><td>传送数据</td></tr><tr><td>movb    src, dest</td><td></td><td>传送字节</td></tr><tr><td>movw    src, dest</td><td></td><td>传送字</td></tr><tr><td>movl    src, dest</td><td></td><td>传送双字</td></tr><tr><td>movq    src, dest</td><td></td><td>传送四字</td></tr><tr><td>movabsq    I, R</td><td>R &lt;- I</td><td>传送绝对四字</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机硬件组成</title>
      <link href="/2019/10/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86/"/>
      <url>/2019/10/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="硬件组成"><a href="#硬件组成" class="headerlink" title="硬件组成"></a>硬件组成</h3><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/计算机系统-硬件基本组成.png" alt="计算机系统-硬件基本组成" style="zoom:80%;"><h4 id="1-基本组成"><a href="#1-基本组成" class="headerlink" title="1. 基本组成"></a>1. 基本组成</h4><ol><li>总线</li><li>I/O设备</li><li>主存</li><li>处理器</li></ol><h4 id="2-为什么引入高速缓存储存器"><a href="#2-为什么引入高速缓存储存器" class="headerlink" title="2. 为什么引入高速缓存储存器"></a>2. 为什么引入高速缓存储存器</h4><blockquote><p>从IO设备中读取数据比从内存中读取数据慢很多，而从内存中读取数据又比从寄存器中读取数据满，从而使用高速缓存储存器，作为暂时的季节区域，存放处理器近期可能需要的数据</p></blockquote><h4 id="3-储存设备层次结构"><a href="#3-储存设备层次结构" class="headerlink" title="3. 储存设备层次结构"></a>3. 储存设备层次结构</h4><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/计算机系统-储存设备层次结构.png" alt="储存设备层次结构" style="zoom:67%;">]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初步认识NIO</title>
      <link href="/2019/10/14/NIO-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"/>
      <url>/2019/10/14/NIO-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是NIO"><a href="#一、什么是NIO" class="headerlink" title="一、什么是NIO"></a>一、什么是NIO</h3><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> NIO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NIO之缓冲区</title>
      <link href="/2019/10/12/NIO-Buffer/"/>
      <url>/2019/10/12/NIO-Buffer/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> NIO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ集群搭建</title>
      <link href="/2019/10/11/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-RocketMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/10/11/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-RocketMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一、六大角色"><a href="#一、六大角色" class="headerlink" title="一、六大角色"></a>一、六大角色</h3><h4 id="1-Producer"><a href="#1-Producer" class="headerlink" title="1. Producer"></a>1. Producer</h4><blockquote><p>消息生产者，负责发送消息到消息队列</p></blockquote><h4 id="2-Consumer"><a href="#2-Consumer" class="headerlink" title="2. Consumer"></a>2. Consumer</h4><blockquote><p>消息消费者，从消息队列中接收消息</p></blockquote><h4 id="3-Broker"><a href="#3-Broker" class="headerlink" title="3. Broker"></a>3. Broker</h4><blockquote><p>暂存和传输消息</p></blockquote><h4 id="4-NameServer"><a href="#4-NameServer" class="headerlink" title="4. NameServer"></a>4. NameServer</h4><blockquote><p>管理Broker，类似注册中心</p></blockquote><h4 id="5-Topic"><a href="#5-Topic" class="headerlink" title="5. Topic"></a>5. Topic</h4><blockquote><p>消息种类</p></blockquote><h4 id="6-MessageQueue"><a href="#6-MessageQueue" class="headerlink" title="6. MessageQueue"></a>6. MessageQueue</h4><blockquote><p>Topic的分区，用于并行发送接受消息</p></blockquote><h3 id="二、-集群介绍"><a href="#二、-集群介绍" class="headerlink" title="二、 集群介绍"></a>二、 集群介绍</h3><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-rocketMQ%E9%9B%86%E7%BE%A4%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="集群搭建示意图"></p><h4 id="2-1-NameServer-集群"><a href="#2-1-NameServer-集群" class="headerlink" title="2.1 NameServer 集群"></a>2.1 NameServer 集群</h4><blockquote><p>几乎无状态，每一个 <em>NameServer</em> 都具有相同的信息，因为每一个 <em>broker</em> 都需要向 <em>NameServer</em> 注册</p></blockquote><h4 id="2-2-Broker-集群"><a href="#2-2-Broker-集群" class="headerlink" title="2.2 Broker 集群"></a>2.2 Broker 集群</h4><blockquote><p>分主从结构，一个 <em>master</em> 可对一个或多个 <em>slave</em> ，一个 <em>slave</em> 只能对应一个 <em>master</em> 。 <em>master</em> 用于写，即发送者发送消息给 <em>master</em> ，<em>slave</em> 用于读，即接受者从 <em>slave</em> 读取消息。<em>Broker</em> 根据 <em>name</em> 分组，<em>name</em> 相同为一组，根据 <em>ID</em> 分主从，<em>ID</em> 为 <em>0</em> 为 <em>Master</em> ，非 0 为 <em>slave</em> ，<em>master</em> 与 <em>slave</em> 之间的消息同步可异步复制也可同步复制。</p></blockquote><h4 id="2-3-Producer-集群"><a href="#2-3-Producer-集群" class="headerlink" title="2.3 Producer 集群"></a>2.3 Producer 集群</h4><blockquote><p>Producer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从<br>NameServer取Topic路由信息，并向提供Topic服务的Master建立长连接，且定时向<br>Master发送心跳。Producer完全无状态，可集群部署。</p></blockquote><h4 id="2-4-Consumer-集群"><a href="#2-4-Consumer-集群" class="headerlink" title="2.4 Consumer 集群"></a>2.4 Consumer 集群</h4><blockquote><p>Consumer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从<br>NameServer取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，<br>且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从<br>Slave订阅消息，订阅规则由Broker配置决定。</p></blockquote><h3 id="三、-集群搭建模式特点"><a href="#三、-集群搭建模式特点" class="headerlink" title="三、 集群搭建模式特点"></a>三、 集群搭建模式特点</h3><h4 id="3-1-单-Master-模式"><a href="#3-1-单-Master-模式" class="headerlink" title="3.1 单 Master 模式"></a>3.1 单 Master 模式</h4><blockquote><p>不建议使用，风险大，当 <em>master</em> 宕机时，服务崩溃</p></blockquote><h4 id="3-2-多-Master-模式"><a href="#3-2-多-Master-模式" class="headerlink" title="3.2 多 Master 模式"></a>3.2 多 Master 模式</h4><ol><li><p>优点</p><blockquote><p>简单易部署，单个master宕机对整个服务无较大影响</p></blockquote></li><li><p>缺点</p><blockquote><p>宕机时未被消费的消息在机器恢复之前不可订阅，导致实时性较低</p></blockquote></li></ol><h4 id="3-3-多-Master-多-Slave-模式（异步）"><a href="#3-3-多-Master-多-Slave-模式（异步）" class="headerlink" title="3.3 多 Master 多 Slave 模式（异步）"></a>3.3 多 Master 多 Slave 模式（异步）</h4><blockquote><p>一个 <em>master</em> 对应一个 <em>slave</em> ，多对主从结构， <em>master</em> 和 <em>slave</em> 之间的复制采用异步复制 ，即发送者将消息发送到 <em>master</em> 后立即返回，然后在进行复制</p></blockquote><ol><li><p>优点</p><blockquote><p>消息处理速度快</p></blockquote></li><li><p>缺点</p><blockquote><p>当 <em>master</em> 宕机时，可能导致部分消息无法异步复制到 <em>slave</em> ，造成消息丢失</p></blockquote></li></ol><h4 id="3-4-多-Master-多-Slave-模式（同步）"><a href="#3-4-多-Master-多-Slave-模式（同步）" class="headerlink" title="3.4 多 Master 多 Slave 模式（同步）"></a>3.4 多 Master 多 Slave 模式（同步）</h4><blockquote><p>一个 <em>master</em> 对应一个 <em>slave</em> ，多对主从结构， <em>master</em> 和 <em>slave</em> 之间的复制采用同步复制 。即发送者将消息发送到 <em>master</em> 后等消息从 <em>master</em> 复制到 <em>slave</em> 成功后才返回成功。</p></blockquote><ol><li><p>优点</p><blockquote><p>消息的可靠性高，安全</p></blockquote></li><li><p>缺点</p><blockquote><p>消息处理速度较异步处理较慢</p></blockquote></li></ol><h3 id="四、-搭建双主双从的同步集群"><a href="#四、-搭建双主双从的同步集群" class="headerlink" title="四、 搭建双主双从的同步集群"></a>四、 搭建双主双从的同步集群</h3><h4 id="4-1-使用-docker-拉取-RocketMQ-镜像文件"><a href="#4-1-使用-docker-拉取-RocketMQ-镜像文件" class="headerlink" title="4.1 使用 docker 拉取 RocketMQ 镜像文件"></a>4.1 使用 docker 拉取 RocketMQ 镜像文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull rocketmqinc/rocketmq</span><br></pre></td></tr></table></figure><h4 id="4-2-创建-nameserver-集群"><a href="#4-2-创建-nameserver-集群" class="headerlink" title="4.2 创建 nameserver 集群"></a>4.2 创建 nameserver 集群</h4><h5 id="4-2-1-创建容器"><a href="#4-2-1-创建容器" class="headerlink" title="4.2.1 创建容器"></a>4.2.1 创建容器</h5><blockquote><p>使用以下命令行创建 <em>nameserver</em> 容器，将 <em>nameserver</em> 默认端口与外部端口19876映射，之后在创建一个容器，外部端口29876映射</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker container create --name rocketmq_ns_1 \</span><br><span class="line">-p 19876:9876 \</span><br><span class="line">-v /home/ccy/rocketMQ/nameserver1/logs/:/opt/logs \</span><br><span class="line">-v /home/ccy/rocketMQ/nameserver1/store/:/opt/store \</span><br><span class="line">-it rocketmqinc/rocketmq:latest</span><br></pre></td></tr></table></figure><h5 id="4-2-2-修改配置文件"><a href="#4-2-2-修改配置文件" class="headerlink" title="4.2.2 修改配置文件"></a>4.2.2 修改配置文件</h5><blockquote><p>找到 <em>runserver.sh</em> 下，将内存修改为适用值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Dynamically calculate parameters, for reference.</span><br><span class="line"># 将内存修改为适用值</span><br><span class="line">Xms=256m</span><br><span class="line">Xmx=256m</span><br><span class="line">Xmn=125m</span><br></pre></td></tr></table></figure><h5 id="4-2-3-启动"><a href="#4-2-3-启动" class="headerlink" title="4.2.3 启动"></a>4.2.3 启动</h5><blockquote><p>启动 <em>nameserver</em></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh mqnamesrv &amp;</span><br></pre></td></tr></table></figure><h4 id="4-3-创建-broker-集群"><a href="#4-3-创建-broker-集群" class="headerlink" title="4.3 创建 broker 集群"></a>4.3 创建 broker 集群</h4><h5 id="4-3-1-创建容器"><a href="#4-3-1-创建容器" class="headerlink" title="4.3.1 创建容器"></a>4.3.1 创建容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建master容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container create --name broker_master_1 -v /home/ccy/rocketMQ/brokermaster1/logs/:/opt/logs -v /home/ccy/rocketMQ/brokermaster1/store/:/opt/store -p 10011:10011 -it rocketmqinc/rocketmq:latest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建slave容器</span></span><br><span class="line">docker container create --name broker_slave_1 -v /home/ccy/rocketMQ/brokermaster1/logs/:/opt/logs -v /home/ccy/rocketMQ/brokermaster1/store/:/opt/store -p 10012:10011 -it rocketmqinc/rocketmq:latest</span><br></pre></td></tr></table></figure><h5 id="4-2-2-修改配置文件-1"><a href="#4-2-2-修改配置文件-1" class="headerlink" title="4.2.2 修改配置文件"></a>4.2.2 修改配置文件</h5><blockquote><p>找到 <em>runbroker.sh</em> 下，将内存修改为适用值(与nameserver相似，不做赘述)</p></blockquote><ol><li>修改broker配置（conf/2m-2s-sync/目录下）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># 所属集群名字</span><br><span class="line">brokerClusterName=rocketmq‐cluster</span><br><span class="line"># broker名字，注意此处不同的配置文件填写的不一样</span><br><span class="line">brokerName=broker‐a</span><br><span class="line"># 0 表示 Master，&gt;0 表示 Slave</span><br><span class="line"># 此处slave需修改</span><br><span class="line">brokerId=0</span><br><span class="line"># nameServer地址，分号分割</span><br><span class="line">namesrvAddr=ip:port;ip:port</span><br><span class="line"># 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"># 是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span><br><span class="line">autoCreateTopicEnable=true</span><br><span class="line"># 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span><br><span class="line">autoCreateSubscriptionGroup=true</span><br><span class="line"># Broker 对外服务的监听端口</span><br><span class="line">listenPort=10011</span><br><span class="line"># 删除文件时间点，默认凌晨 4点</span><br><span class="line">deleteWhen=04</span><br><span class="line"># 文件保留时间，默认 48 小时</span><br><span class="line">fileReservedTime=120</span><br><span class="line"># commitLog每个文件的大小默认1G</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line"># ConsumeQueue每个文件默认存30W条，根据业务情况调整</span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line"># destroyMapedFileIntervalForcibly=120000</span><br><span class="line"># redeleteHangedFileInterval=120000</span><br><span class="line"># 检测物理文件磁盘空间</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"># 存储路径</span><br><span class="line">storePathRootDir=/opt/store</span><br><span class="line"># commitLog 存储路径</span><br><span class="line">storePathCommitLog=/opt/logs</span><br><span class="line"># 消费队列存储路径存储路径</span><br><span class="line">storePathConsumeQueue=/opt/store/consumequeue</span><br><span class="line"># 消息索引存储路径</span><br><span class="line">storePathIndex=/opt/store/index</span><br><span class="line"># checkpoint 文件存储路径</span><br><span class="line">storeCheckpoint=/opt/store/checkpoint</span><br><span class="line"># abort 文件存储路径</span><br><span class="line">abortFile=/opt/store/abort</span><br><span class="line"># 限制的消息大小</span><br><span class="line">maxMessageSize=65536</span><br><span class="line"># flushCommitLogLeastPages=4</span><br><span class="line"># flushConsumeQueueLeastPages=2</span><br><span class="line"># flushCommitLogThoroughInterval=10000</span><br><span class="line"># flushConsumeQueueThoroughInterval=60000</span><br><span class="line"># Broker 的角色</span><br><span class="line"># ‐ ASYNC_MASTER 异步复制Master</span><br><span class="line"># ‐ SYNC_MASTER 同步双写Master</span><br><span class="line"># ‐ SLAVE</span><br><span class="line"># 此处slave需修改</span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line"># 刷盘方式</span><br><span class="line"># ‐ ASYNC_FLUSH 异步刷盘</span><br><span class="line"># ‐ SYNC_FLUSH 同步刷盘</span><br><span class="line">flushDiskType=SYNC_FLUSH</span><br><span class="line"># checkTransactionMessageEnable=false</span><br><span class="line"># 发消息线程池数量</span><br><span class="line"># sendMessageThreadPoolNums=128</span><br><span class="line"># 拉消息线程池数量</span><br><span class="line"># pullMessageThreadPoolNums=128</span><br></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nohup sh mqbroker -c broker-a.properties</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动slave</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nohup sh mqbroker -c broker<span class="_">-a</span>-s.properties</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>消息中间件介绍</title>
      <link href="/2019/10/11/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-MQ%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/10/11/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-MQ%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、为什么要使用消息队列"><a href="#一、为什么要使用消息队列" class="headerlink" title="一、为什么要使用消息队列"></a>一、为什么要使用消息队列</h3><h4 id="1-解耦及异步"><a href="#1-解耦及异步" class="headerlink" title="1. 解耦及异步"></a>1. 解耦及异步</h4><blockquote><p>使用消息队列可以将同步调用变为异步调用，同时降低系统模块之间的耦合度</p></blockquote><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/消息队列-异步解耦.png" alt="解耦" style="zoom:80%;"><h4 id="2-削峰"><a href="#2-削峰" class="headerlink" title="2. 削峰"></a>2. 削峰</h4><blockquote><p>当系统压力过大时，将操作缓存在消息队列中，后面不断读取消息进行操作，达到削峰的目的</p></blockquote><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/消息队列-削峰.png" alt="削峰" style="zoom:80%;"><h4 id="3-复用-可拓展性"><a href="#3-复用-可拓展性" class="headerlink" title="3. 复用(可拓展性)"></a>3. 复用(可拓展性)</h4><blockquote><p>如果系统A要发送消息给多个系统，此时每增加一个子系统，系统A的代码就需要修改，使用消息队列之后，系统A将消息发送到消息队列，其他系统读取消息即可。新增系统时只需到消息队列和宗读取消息即可</p></blockquote><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/消息队列-扩展性.png" alt="复用" style="zoom: 80%;"><h3 id="二、需要注意事项"><a href="#二、需要注意事项" class="headerlink" title="二、需要注意事项"></a>二、需要注意事项</h3><h4 id="1-注意提高可用性"><a href="#1-注意提高可用性" class="headerlink" title="1. 注意提高可用性"></a>1. 注意提高可用性</h4><blockquote><p>当MQ服务器宕机时，备用方案。</p></blockquote><h4 id="2-系统复杂度提高"><a href="#2-系统复杂度提高" class="headerlink" title="2. 系统复杂度提高"></a>2. 系统复杂度提高</h4><ol><li>消息重复消费问题</li><li>消息丢失问题</li><li>消息传递顺序问题</li></ol><h4 id="3-一致性问题"><a href="#3-一致性问题" class="headerlink" title="3. 一致性问题"></a>3. 一致性问题</h4><blockquote><p>当多系统处理同一条消息时，同步调用可直接返回失败，使用消息队列的异步调用该如何处理</p></blockquote><h3 id="三、-常见消息中间件对比"><a href="#三、-常见消息中间件对比" class="headerlink" title="三、 常见消息中间件对比"></a>三、 常见消息中间件对比</h3><table><thead><tr><th></th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>实现语言</td><td>java</td><td>erlang</td><td>java</td><td>scala</td></tr><tr><td>吞吐量</td><td>万级</td><td>万级</td><td>十万级</td><td>十万级</td></tr><tr><td>时效</td><td>ms</td><td>微秒</td><td>ms</td><td>ms</td></tr><tr><td>可用性</td><td>高（主从）</td><td>高（主从）</td><td>非常高（分布式）</td><td>非常高（分布式）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ入门</title>
      <link href="/2019/10/11/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-RocketMQ%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2019/10/11/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-RocketMQ%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装以及配置"><a href="#一、安装以及配置" class="headerlink" title="一、安装以及配置"></a>一、安装以及配置</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><blockquote><p>从<a href="http://rocketmq.apache.org/" target="_blank" rel="noopener">官网</a>下载二进制文件后解压</p></blockquote><h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h4><ol><li><p>修改 <em>bin</em> 目录下 <strong><em>runbroker.sh</em></strong></p><blockquote><p>找到以下位置：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g -Xmn4g"</span><br></pre></td></tr></table></figure><blockquote><p>将内存修改为于自己电脑配置相容的大小，我修改为：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m"</span><br></pre></td></tr></table></figure></li><li><p>修改 <em>bin</em> 目录下 <strong><em>runserver.sh</em></strong></p><blockquote><p>找到以下位置：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn3g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span><br></pre></td></tr></table></figure><blockquote><p>将内存修改为于自己电脑配置相容的大小，我修改为：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span><br></pre></td></tr></table></figure></li></ol><h3 id="二、启动及关闭-RocketMQ"><a href="#二、启动及关闭-RocketMQ" class="headerlink" title="二、启动及关闭 RocketMQ"></a>二、启动及关闭 RocketMQ</h3><h4 id="1-启动"><a href="#1-启动" class="headerlink" title="1. 启动"></a>1. 启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入bin目录</span><br><span class="line"><span class="meta">$</span> cd bin/</span><br><span class="line"><span class="meta">#</span> 启动 nameserver</span><br><span class="line"><span class="meta">$</span> nohup sh mqnamesrv &amp;</span><br><span class="line"><span class="meta">#</span> 启动 broker 连接上 nameserver，默认端口为 9876</span><br><span class="line"><span class="meta">$</span> nohup sh mqbroker -n localhost:9876 &amp;</span><br><span class="line"><span class="meta">#</span> 查看是否启动</span><br><span class="line"><span class="meta">$</span> jps</span><br><span class="line">5569 NamesrvStartup</span><br><span class="line">5697 Jps</span><br><span class="line">5597 BrokerStartup</span><br></pre></td></tr></table></figure><h4 id="2-关闭"><a href="#2-关闭" class="headerlink" title="2. 关闭"></a>2. 关闭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 关闭 broker</span><br><span class="line"><span class="meta">$</span> sh mqshutdown broker</span><br><span class="line">The mqbroker(5597) is running...</span><br><span class="line">Send shutdown request to mqbroker(5597) OK</span><br><span class="line"><span class="meta">#</span> 关闭 nameserver</span><br><span class="line"><span class="meta">$</span> sh mqshutdown namesrv</span><br><span class="line">The mqnamesrv(5569) is running...</span><br><span class="line">Send shutdown request to mqnamesrv(5569) OK</span><br><span class="line">[2]+  Exit 143                nohup sh mqbroker -n localhost:9876</span><br></pre></td></tr></table></figure><h3 id="三、测试-RocketMQ"><a href="#三、测试-RocketMQ" class="headerlink" title="三、测试 RocketMQ"></a>三、测试 RocketMQ</h3><h4 id="1-shell-测试"><a href="#1-shell-测试" class="headerlink" title="1. shell 测试"></a>1. shell 测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动生产者，生产者发送完消息后会自动关闭</span><br><span class="line"><span class="meta">$</span> export NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="meta">$</span> sh tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动消费者，消费者线程会不断监听有没有新消息</span><br><span class="line"><span class="meta">$</span> export NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="meta">$</span> sh tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure><h4 id="2-java-测试"><a href="#2-java-测试" class="headerlink" title="2. java 测试"></a>2. java 测试</h4><blockquote><p>各种使用样例查看<a href="http://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noopener">官网快速入门</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之行为型模式</title>
      <link href="/2019/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、模板方法模式"><a href="#一、模板方法模式" class="headerlink" title="一、模板方法模式"></a>一、模板方法模式</h3><blockquote><p>定义一个操作中的算法框架，将一些步骤的实现放在子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤</p></blockquote><h4 id="1-实现"><a href="#1-实现" class="headerlink" title="1. 实现"></a>1. 实现</h4><blockquote><p>使用继承机制，父类为抽象类，定义了两种方法类型</p></blockquote><h5 id="1-1-基本方法"><a href="#1-1-基本方法" class="headerlink" title="1.1 基本方法"></a>1.1 基本方法</h5><blockquote><p>为抽象方法类型，有子类自定义实现</p></blockquote><h5 id="1-2-模板方法"><a href="#1-2-模板方法" class="headerlink" title="1.2 模板方法"></a>1.2 模板方法</h5><blockquote><p>在抽象父类中实现，实现对基本方法的调用，完成固定的逻辑</p></blockquote><h4 id="2-优缺点"><a href="#2-优缺点" class="headerlink" title="2. 优缺点"></a>2. 优缺点</h4><h5 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h5><h6 id="2-1-1-封装不变部分，扩展可变部分"><a href="#2-1-1-封装不变部分，扩展可变部分" class="headerlink" title="2.1.1 封装不变部分，扩展可变部分"></a>2.1.1 封装不变部分，扩展可变部分</h6><blockquote><p>不变部分代码封装到父类中，可变部分代码由子类继承实现</p></blockquote><h6 id="2-1-2-提取公共代码，便于维护"><a href="#2-1-2-提取公共代码，便于维护" class="headerlink" title="2.1.2 提取公共代码，便于维护"></a>2.1.2 提取公共代码，便于维护</h6><h6 id="2-1-3-行为由父类控制，子类实现"><a href="#2-1-3-行为由父类控制，子类实现" class="headerlink" title="2.1.3 行为由父类控制，子类实现"></a>2.1.3 行为由父类控制，子类实现</h6><blockquote><p>基本方法由子类实现，易于扩展增加功能</p></blockquote><h5 id="2-2-缺点"><a href="#2-2-缺点" class="headerlink" title="2.2 缺点"></a>2.2 缺点</h5><blockquote><p>不符合一般设计规则，一般来说，抽象父类只声明而不实现</p></blockquote><h4 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3. 代码示例"></a>3. 代码示例</h4><h5 id="3-1-模板类"><a href="#3-1-模板类" class="headerlink" title="3.1 模板类"></a>3.1 模板类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccy.designPattern.template;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAnimal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本方法,由子类负责实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eating</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drinking</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板方法,一般使用final关键字修饰,避免产生不必要的冲突</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">live</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eating();</span><br><span class="line">        <span class="keyword">this</span>.drinking();</span><br><span class="line">        <span class="keyword">this</span>.sleeping();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-具体实现类"><a href="#3-2-具体实现类" class="headerlink" title="3.2 具体实现类"></a>3.2 具体实现类</h5><blockquote><p>实现基本方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">AbstractAnimal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">eating</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">drinking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫喝牛奶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫很喜欢睡懒觉"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">AbstractAnimal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">eating</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃骨头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">drinking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗喝水"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗睡得比较少"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractAnimal dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        AbstractAnimal cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        dog.live();</span><br><span class="line">        cat.live();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、命令模式"><a href="#二、命令模式" class="headerlink" title="二、命令模式"></a>二、命令模式</h3><blockquote></blockquote><h3 id="三、访问者模式"><a href="#三、访问者模式" class="headerlink" title="三、访问者模式"></a>三、访问者模式</h3><h3 id="四、迭代器模式"><a href="#四、迭代器模式" class="headerlink" title="四、迭代器模式"></a>四、迭代器模式</h3><h3 id="五、观察者模式"><a href="#五、观察者模式" class="headerlink" title="五、观察者模式"></a>五、观察者模式</h3><h3 id="六、中介者模式"><a href="#六、中介者模式" class="headerlink" title="六、中介者模式"></a>六、中介者模式</h3><h3 id="七、备忘录模式"><a href="#七、备忘录模式" class="headerlink" title="七、备忘录模式"></a>七、备忘录模式</h3><h3 id="八、解释器模式"><a href="#八、解释器模式" class="headerlink" title="八、解释器模式"></a>八、解释器模式</h3><h3 id="九、状态模式"><a href="#九、状态模式" class="headerlink" title="九、状态模式"></a>九、状态模式</h3><h3 id="十、策略模式"><a href="#十、策略模式" class="headerlink" title="十、策略模式"></a>十、策略模式</h3><blockquote><p>定义了算法族，分别封装起来，让他们之间可以相互替换，此模式让算法独立于使用算法的用户</p></blockquote><h4 id="1-优缺点"><a href="#1-优缺点" class="headerlink" title="1. 优缺点"></a>1. 优缺点</h4><h5 id="1-1-优点"><a href="#1-1-优点" class="headerlink" title="1.1 优点"></a>1.1 优点</h5><ol><li>算法可自由切换组合</li><li>避免使用多重条件判断</li><li>扩展性良好</li></ol><h5 id="1-2-缺点"><a href="#1-2-缺点" class="headerlink" title="1.2 缺点"></a>1.2 缺点</h5><ol><li>策略类数量较多</li><li>所有的策略类都需要对外暴露</li></ol><h4 id="2-代码示例"><a href="#2-代码示例" class="headerlink" title="2. 代码示例"></a>2. 代码示例</h4><h3 id="十一、职责链模式（责任链）"><a href="#十一、职责链模式（责任链）" class="headerlink" title="十一、职责链模式（责任链）"></a>十一、职责链模式（责任链）</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之结构型模式</title>
      <link href="/2019/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、适配器模式"><a href="#一、适配器模式" class="headerlink" title="一、适配器模式"></a>一、适配器模式</h3><blockquote></blockquote><h3 id="二、桥接模式"><a href="#二、桥接模式" class="headerlink" title="二、桥接模式"></a>二、桥接模式</h3><h3 id="三、装饰模式"><a href="#三、装饰模式" class="headerlink" title="三、装饰模式"></a>三、装饰模式</h3><blockquote><p>动态地给一个对象添加一些额外的职责，就增加功能而言，装饰模式比生成子类更加灵活</p></blockquote><h4 id="1-角色"><a href="#1-角色" class="headerlink" title="1. 角色"></a>1. 角色</h4><!-- 类图 --><h5 id="1-1-Component-抽象构件"><a href="#1-1-Component-抽象构件" class="headerlink" title="1.1 Component 抽象构件"></a>1.1 Component 抽象构件</h5><blockquote><p>接口或抽象类，定义核心即最原始的对象</p></blockquote><h5 id="1-2-ConcreteComponent-具体构件"><a href="#1-2-ConcreteComponent-具体构件" class="headerlink" title="1.2 ConcreteComponent 具体构件"></a>1.2 ConcreteComponent 具体构件</h5><blockquote><p>Component 接口的实现类，被装饰对象</p></blockquote><h5 id="1-3-Decorator-装饰角色"><a href="#1-3-Decorator-装饰角色" class="headerlink" title="1.3 Decorator 装饰角色"></a>1.3 Decorator 装饰角色</h5><blockquote><p>一般为抽象类，必有一私有属性指向 Component 抽象构件</p></blockquote><h5 id="1-4-ConcreteDecorator-具体装饰角色"><a href="#1-4-ConcreteDecorator-具体装饰角色" class="headerlink" title="1.4  ConcreteDecorator 具体装饰角色"></a>1.4  ConcreteDecorator 具体装饰角色</h5><blockquote><p>Decorator 的实现类，装饰者</p></blockquote><h4 id="2-优缺点"><a href="#2-优缺点" class="headerlink" title="2. 优缺点"></a>2. 优缺点</h4><h5 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h5><ol><li>装饰类和被装饰类不互相耦合</li><li>装饰模式是继承关系的一个替代方案</li><li>装饰模式可以动态的扩展一个实现类的功能</li></ol><h4 id="2-2-缺点"><a href="#2-2-缺点" class="headerlink" title="2.2 缺点"></a>2.2 缺点</h4><ol><li>多层装饰比较复杂，难以扩展和维护</li></ol><p><strong>注</strong> 最好减少装饰类的数量，以降低系统复杂度</p><h4 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3. 代码示例"></a>3. 代码示例</h4><h3 id="四、组合模式"><a href="#四、组合模式" class="headerlink" title="四、组合模式"></a>四、组合模式</h3><h3 id="五、外观模式"><a href="#五、外观模式" class="headerlink" title="五、外观模式"></a>五、外观模式</h3><blockquote><p>提供了一个统一的接口，用来访问子系统的一群接口（将一堆功能统一在另一个高级功能中）</p></blockquote><h3 id="六、享元模式"><a href="#六、享元模式" class="headerlink" title="六、享元模式"></a>六、享元模式</h3><h3 id="七、代理模式"><a href="#七、代理模式" class="headerlink" title="七、代理模式"></a>七、代理模式</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之创建型模式</title>
      <link href="/2019/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、单例模式"><a href="#一、单例模式" class="headerlink" title="一、单例模式"></a>一、单例模式</h3><blockquote><p>在整个软件系统中，某个类只能存在一个对象实例，并且该类之提供一个取得对象实例的方法</p></blockquote><h4 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h4><ol><li>需要频繁的进行创建和销毁的对象</li><li>创建对象时消耗过多的资源但又经常用到的对象(重量级对象)</li><li>工具类对象，频繁访问数据库或文件的对象</li></ol><h4 id="2-代码示例"><a href="#2-代码示例" class="headerlink" title="2.代码示例"></a>2.代码示例</h4><h5 id="2-1-饿汉式"><a href="#2-1-饿汉式" class="headerlink" title="2.1 饿汉式"></a>2.1 饿汉式</h5><ul><li><p>优点</p><blockquote><p>在类装载时完成实例化，避免线程同步的问题</p></blockquote></li><li><p>缺点</p><blockquote><p>没有懒加载效果，可能造成内存浪费</p></blockquote></li><li><p>静态常量</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式饿汉式(静态常量式)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将类对象常量化,在类初始化时实例化,饿汉式加载</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton1 instance = <span class="keyword">new</span> Singleton1();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供的静态方法以获取对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式饿汉式(静态代码块)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton2 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用静态代码块初始化常量,在类初始化时实例化,饿汉式加载</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-懒汉式"><a href="#2-2-懒汉式" class="headerlink" title="2.2 懒汉式"></a>2.2 懒汉式</h5><ol><li>线程不安全</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 懒汉氏加载,第一次使用时才实例化</span></span><br><span class="line"><span class="comment">     * 线程不安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>同步方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步方法</span></span><br><span class="line"><span class="comment"> * 懒汉式加载(线程安全)</span></span><br><span class="line"><span class="comment"> * 第一次使用时才实例化,方法同步,线程安全</span></span><br><span class="line"><span class="comment"> * 效率太低，每次获取示例都会阻塞</span></span><br><span class="line"><span class="comment"> * 不推荐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步代码块获取实例,此方法无效,并不能使线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">// 线程在此等待,不会重新判断</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>双重检查</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检查,基于同步方法懒汉式加载进行改进</span></span><br><span class="line"><span class="comment"> * 提高效率同时保证了线程安全</span></span><br><span class="line"><span class="comment"> * 懒汉式加载(线程安全)</span></span><br><span class="line"><span class="comment"> * 推荐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton5 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton5.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton5();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>静态内部类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒加载(静态内部类方法)</span></span><br><span class="line"><span class="comment"> * 当本类加载时并不会造成静态内部类的加载，只有当调用到getInstance()时，才会使其加载</span></span><br><span class="line"><span class="comment"> * 推荐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton6 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类初始化时实例化，保证了线程安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton6 instance = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当调用此方法时才触发子类的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-枚举"><a href="#2-3-枚举" class="headerlink" title="2.3 枚举"></a>2.3 <strong><em>枚举</em></strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过枚举实现单例</span></span><br><span class="line"><span class="comment"> * 线程安全同时防止反序列化重新创建新的对象</span></span><br><span class="line"><span class="comment"> * 推荐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">enum</span> Singleton7 &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、抽象工厂模式"><a href="#二、抽象工厂模式" class="headerlink" title="二、抽象工厂模式"></a>二、抽象工厂模式</h3><h3 id="三、原型模式"><a href="#三、原型模式" class="headerlink" title="三、原型模式"></a>三、原型模式</h3><blockquote><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</p></blockquote><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h4><h5 id="1-1-性能优良"><a href="#1-1-性能优良" class="headerlink" title="1.1 性能优良"></a>1.1 性能优良</h5><blockquote><p>原型模式时在内存二进制流的拷贝，比直接new一个对象的性能要好很多，当需要循环产生大量对象的时候，性能优化更能体现</p></blockquote><h5 id="1-2-不使用构造函数"><a href="#1-2-不使用构造函数" class="headerlink" title="1.2 不使用构造函数"></a>1.2 不使用构造函数</h5><blockquote><p>减少约束，同时也是<strong>缺点</strong></p></blockquote><h4 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h4><h5 id="1-1-资源优化场景"><a href="#1-1-资源优化场景" class="headerlink" title="1.1 资源优化场景"></a>1.1 资源优化场景</h5><blockquote><p>类初始化需要小花非常多的资源</p></blockquote><h5 id="1-2-性能和安全要求的场景"><a href="#1-2-性能和安全要求的场景" class="headerlink" title="1.2 性能和安全要求的场景"></a>1.2 性能和安全要求的场景</h5><blockquote><p>若需要频繁的创建对象或者创建对象的过程十分繁琐，考虑使用原型模式</p></blockquote><h5 id="1-3-一个对象多个修改者的场景"><a href="#1-3-一个对象多个修改者的场景" class="headerlink" title="1.3 一个对象多个修改者的场景"></a>1.3 一个对象多个修改者的场景</h5><blockquote><p>当一个对象需要提供给多个对象访问修改时，可考虑原型模式拷贝多个对象供调用者使用</p></blockquote><h4 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3. 代码示例"></a>3. 代码示例</h4><blockquote><p>群发邮件</p></blockquote><h5 id="3-1-邮件类"><a href="#3-1-邮件类" class="headerlink" title="3.1 邮件类"></a>3.1 邮件类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型类必须实现Cloneable接口</span></span><br><span class="line"><span class="comment"> * 只有实现Cloneable接口,虚拟机才会认为这类对象可拷贝</span></span><br><span class="line"><span class="comment"> * 省略 setter()/getter() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mail</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String context;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mail</span><span class="params">(String title, String context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写Object类的 clone 方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mail <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Mail mail = (Mail) <span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="keyword">return</span> mail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-测试类"><a href="#3-2-测试类" class="headerlink" title="3.2 测试类"></a>3.2 测试类</h5><blockquote><p>不使用原型模式，每次都需要创建( new )一个邮件对象，当数量庞大时，性能低</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] names = &#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"赵六"</span>&#125;;</span><br><span class="line">        String[] addresses = &#123;<span class="string">"zhangsan@cy.com"</span>, <span class="string">"lisi@cy.com"</span>,</span><br><span class="line">                <span class="string">"wangwu@cy.com"</span>, <span class="string">"zhaoliu@cy.com"</span>&#125;;</span><br><span class="line">        String title = <span class="string">"广告"</span>;</span><br><span class="line">        String context = <span class="string">"广告的内容"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            Mail mail = <span class="keyword">new</span> Mail(title, context);</span><br><span class="line">            mail.setName(names[i]);</span><br><span class="line">            mail.setAddress(addresses[i]);</span><br><span class="line">            sendMail(mail);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(Mail mail)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"接受者姓名："</span> + mail.getName());</span><br><span class="line">        System.out.println(<span class="string">"接受者邮箱："</span> + mail.getAddress());</span><br><span class="line">        System.out.println(<span class="string">"邮件标题："</span> + mail.getTitle());</span><br><span class="line">        System.out.println(<span class="string">"邮件内容："</span> + mail.getContext());</span><br><span class="line">        System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用原型模式，发送的邮件均为克隆对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] names = &#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"赵六"</span>&#125;;</span><br><span class="line">        String[] addresses = &#123;<span class="string">"zhangsan@cy.com"</span>, <span class="string">"lisi@cy.com"</span>,</span><br><span class="line">                <span class="string">"wangwu@cy.com"</span>, <span class="string">"zhaoliu@cy.com"</span>&#125;;</span><br><span class="line">        String title = <span class="string">"广告"</span>;</span><br><span class="line">        String context = <span class="string">"广告的内容"</span>;</span><br><span class="line">        Mail mail = <span class="keyword">new</span> Mail(title, context);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            Mail mailClone = mail.clone();</span><br><span class="line">            mail.setName(names[i]);</span><br><span class="line">            mail.setAddress(addresses[i]);</span><br><span class="line">            sendMail(mail);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(Mail mail)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"接受者姓名："</span> + mail.getName());</span><br><span class="line">        System.out.println(<span class="string">"接受者邮箱："</span> + mail.getAddress());</span><br><span class="line">        System.out.println(<span class="string">"邮件标题："</span> + mail.getTitle());</span><br><span class="line">        System.out.println(<span class="string">"邮件内容："</span> + mail.getContext());</span><br><span class="line">        System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-浅拷贝与深拷贝"><a href="#4-浅拷贝与深拷贝" class="headerlink" title="4. 浅拷贝与深拷贝"></a>4. 浅拷贝与深拷贝</h4><h5 id="4-1-浅拷贝"><a href="#4-1-浅拷贝" class="headerlink" title="4.1 浅拷贝"></a>4.1 浅拷贝</h5><blockquote><p>只拷贝本对象，而对象内部的数组、引用对象等都不进行拷贝，仍旧指向原对象的内部元素地址，即内部元素共享</p></blockquote><h5 id="4-2-深拷贝"><a href="#4-2-深拷贝" class="headerlink" title="4.2 深拷贝"></a>4.2 深拷贝</h5><blockquote><p>完全拷贝对象，内部元素也拷贝，也可通过二进制流操作对象实现对象的深拷贝</p></blockquote><h3 id="四、建造者模式"><a href="#四、建造者模式" class="headerlink" title="四、建造者模式"></a>四、建造者模式</h3><blockquote><p>将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示</p></blockquote><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="1-优点-1"><a href="#1-优点-1" class="headerlink" title="1 优点"></a>1 优点</h5><h6 id="1-1封装性"><a href="#1-1封装性" class="headerlink" title="1.1封装性"></a>1.1封装性</h6><blockquote><p>使客户端不必知道产品的内部组成细节</p></blockquote><h6 id="1-2-建造者独立，易于扩展"><a href="#1-2-建造者独立，易于扩展" class="headerlink" title="1.2 建造者独立，易于扩展"></a>1.2 建造者独立，易于扩展</h6><blockquote><p>每个建造者之间相互独立，对系统扩展非常有利</p></blockquote><h6 id="1-3-便于控制细节风险"><a href="#1-3-便于控制细节风险" class="headerlink" title="1.3 便于控制细节风险"></a>1.3 便于控制细节风险</h6><blockquote><p>每个具体建造者之间是相互独立的，因此对一个建造过程细化不会对其他模块产生影响</p></blockquote><h3 id="五、工厂模式"><a href="#五、工厂模式" class="headerlink" title="五、工厂模式"></a>五、工厂模式</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Lock接口以及队列同步器</title>
      <link href="/2019/10/03/%E5%B9%B6%E5%8F%91-%E9%94%81/"/>
      <url>/2019/10/03/%E5%B9%B6%E5%8F%91-%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h2><h3 id="一、lock-与-synchronized"><a href="#一、lock-与-synchronized" class="headerlink" title="一、lock 与 synchronized"></a>一、lock 与 synchronized</h3><blockquote><p><em>synchronized</em> 会隐式的获取锁，但是锁的获取和释放固化了，简化了管理，但灵活性降低。</p></blockquote><h4 id="1-Lock-接口提供的-synchronized-不具备的主要特性"><a href="#1-Lock-接口提供的-synchronized-不具备的主要特性" class="headerlink" title="1. Lock 接口提供的 synchronized 不具备的主要特性"></a>1. <em>Lock</em> 接口提供的 <em>synchronized</em> 不具备的主要特性</h4><table><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td>尝试非阻塞的获取锁</td><td>当前线程尝试获取锁，如果这一时刻没有被其他线程获取到锁，则成功获取</td></tr><tr><td>能被中断的获取锁</td><td>获取到锁的线程可被中断，中断时抛出中断异常，同时释放锁</td></tr><tr><td>超时获取锁</td><td>在指定时间之前获取锁，获取不到则返回</td></tr></tbody></table><h4 id="2-Lock-Api"><a href="#2-Lock-Api" class="headerlink" title="2. Lock Api"></a>2. <em>Lock</em> Api</h4><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><em>void lock()</em></td><td>获取锁，调用此方法的线程会获取锁，或得之后返回，不然则阻塞</td></tr><tr><td><em>void lockINterruotibly() throws INterruptedException</em></td><td>可中断的获取锁</td></tr><tr><td><em>boolean tryLock()</em></td><td>尝试非阻塞的获取锁，调用方法后立刻返回，获取到返回 <em>true</em> ，否则返回 <em>false</em></td></tr><tr><td><em>boolean tryLock(long, TimeUnit)</em></td><td>超时获取锁，以下三种情况返回<br>1. 获取到锁<br>2. 被中断<br>3. 超时</td></tr><tr><td><em>void unLock()</em></td><td>释放锁</td></tr><tr><td><em>Condition new Condition()</em></td><td>获取等待通知组件</td></tr></tbody></table><h3 id="二、队列同步器"><a href="#二、队列同步器" class="headerlink" title="二、队列同步器"></a>二、队列同步器</h3><blockquote><p>队列同步器是用来构建锁或者其他同步组件的基础框架，使用一个int成员变量表示同步状态。通过内置的 <em>FIFO</em> 队列来完成资源获取线程的排队工作</p></blockquote><h4 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1. 使用方法"></a>1. 使用方法</h4><blockquote><p>通过继承 <em>AbstarctQueueSynchronizer</em> 并实现其抽象方法来管理同步状态</p></blockquote><h4 id="2-同步器提供的状态获取与修改方法"><a href="#2-同步器提供的状态获取与修改方法" class="headerlink" title="2. 同步器提供的状态获取与修改方法"></a>2. 同步器提供的状态获取与修改方法</h4><ol><li><em>getState()</em> : 获取当前同步状态</li><li><em>setState(int newState)</em> : 设置当前同步状态</li><li><em>compareAndSetState(int expect, int update)</em> : 使用CAS设置当前状态，可保证状态设置的原子性</li></ol><h4 id="3-同步器可重写的方法"><a href="#3-同步器可重写的方法" class="headerlink" title="3. 同步器可重写的方法"></a>3. 同步器可重写的方法</h4><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><em>protected boolean tryAcquire(int arg)</em></td><td>独占式获取同步状态，实现该方法需要<strong>查询</strong>当前同步状态并<strong>判断</strong>是否符合预期，然后再使用<strong>CAS设置同步状态</strong></td></tr><tr><td><em>protected boolean tryRelease(int arg)</em></td><td>独占式释放同步状态，等待湖欧青同步状态的线程将有机会获取同步状态</td></tr><tr><td><em>protected boolean tryAcquireShared(int arg)</em></td><td>共享式获取同步状态，返回大于等于0的值则表示成功，否则不成功</td></tr><tr><td><em>protected boolean tryReleaseShared(int arg)</em></td><td>共享式释放同步状态</td></tr><tr><td><em>protected boolean isHeldExclusively()</em></td><td>当前同步器是否在独占模式下被线程占用，一般该方法表示是否被<strong>当前线程</strong>所独占</td></tr></tbody></table><h4 id="4-队列同步器的实现分析"><a href="#4-队列同步器的实现分析" class="headerlink" title="4. 队列同步器的实现分析"></a>4. 队列同步器的实现分析</h4><blockquote><p>同步器内部维持了一个队列，当线程尝试获取同步状态而获取不到时，队列同步器会将其添加到队列末端，当一个线程释放同步状态时，同步器会从队列顶端拿出一个线程获取同步状态</p></blockquote><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8%E5%86%85%E9%83%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="队列同步器工作原理"></p><h4 id="5-自定义独占锁"><a href="#5-自定义独占锁" class="headerlink" title="5. 自定义独占锁"></a>5. 自定义独占锁</h4><blockquote><p>只能由一个线程获取同步状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccy.thread.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.AbstractQueuedSynchronizer;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用同步器自定义一个独占式锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步器继承于 AbstractQueuedSynchronizer</span></span><br><span class="line"><span class="comment">     * 每一个同步器需要实现的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 非阻塞式获取同步状态,使用CAS</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> arg</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 释放同步状态</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> arg</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 查看当前同步状态,若未被获取则抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (getState() == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            <span class="comment">// 将占用线程设置为空</span></span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 状态设置为0</span></span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回一个condition,等待通知条件</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看锁是否被占用</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在锁内部维护一个同步器对象</span></span><br><span class="line">    <span class="keyword">private</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞式获取锁，获取不到则在同步队列中排队</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非阻塞式获取锁,立即返回是否获取到锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时获取锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-自定义可重入锁"><a href="#6-自定义可重入锁" class="headerlink" title="6. 自定义可重入锁"></a>6. 自定义可重入锁</h4><blockquote><p>锁只能有一个线程获取，但已获取锁的线程可以多次获取</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ccy.thread.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.AbstractQueuedSynchronizer;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReentrant</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 释放锁,如果锁被完全释放,则返回true,若此线程还占用锁,返回false</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> arg</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> state = getState();</span><br><span class="line">            <span class="comment">// 如果当前锁未被获取或者非有锁线程释放锁,抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (state == <span class="number">0</span> || (getExclusiveOwnerThread() !=                                                   Thread.currentThread()))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            state = state - arg;</span><br><span class="line">            <span class="keyword">boolean</span> isFree = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (state == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果状态为0，将获取锁线程设置为空</span></span><br><span class="line">                setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">                isFree = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            setState(state);</span><br><span class="line">            <span class="keyword">return</span> isFree;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 可重入锁的非阻塞式获取锁</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> arg</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> state = getState();</span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="comment">// 如果当前锁未被获取,则和排他锁一样的操作</span></span><br><span class="line">            <span class="keyword">if</span> (state == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                    setExclusiveOwnerThread(current);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果锁已被获取,查看是否被当前线程获取,是则可重入,不是则无法获取到锁</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getExclusiveOwnerThread() == current) &#123;</span><br><span class="line">                setState(state + arg);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查看锁是否被当前线程获取</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-读写锁"><a href="#7-读写锁" class="headerlink" title="7. 读写锁"></a>7. 读写锁</h4><blockquote><p>读允许多个线程，写只允许一个线程，可重入，已获取写锁的线程可读，其他线程读写都阻塞于锁</p></blockquote><blockquote><p>读锁与写锁共享一个同步状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent.locks;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantReadWriteLock</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ReadWriteLock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6992448646407690164L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;</span><br><span class="line">    <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReentrantReadWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReentrantReadWriteLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">        readerLock = <span class="keyword">new</span> ReadLock(<span class="keyword">this</span>);</span><br><span class="line">        writerLock = <span class="keyword">new</span> WriteLock(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ReentrantReadWriteLock.<span class="function">WriteLock <span class="title">writeLock</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> writerLock; &#125;</span><br><span class="line">    <span class="keyword">public</span> ReentrantReadWriteLock.<span class="function">ReadLock  <span class="title">readLock</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> readerLock; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6317671515068378041L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHARED_SHIFT   = <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHARED_UNIT    = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT);</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_COUNT      = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCLUSIVE_MASK = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sharedCount</span><span class="params">(<span class="keyword">int</span> c)</span>    </span>&#123; <span class="keyword">return</span> c &gt;&gt;&gt; SHARED_SHIFT; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">exclusiveCount</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123; <span class="keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HoldCounter</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> tid = getThreadId(Thread.currentThread());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalHoldCounter</span></span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">ThreadLocal</span>&lt;<span class="title">HoldCounter</span>&gt; </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> HoldCounter <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HoldCounter();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">transient</span> ThreadLocalHoldCounter readHolds;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">transient</span> HoldCounter cachedHoldCounter;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">transient</span> Thread firstReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> firstReaderHoldCount;</span><br><span class="line"></span><br><span class="line">        Sync() &#123;</span><br><span class="line">            readHolds = <span class="keyword">new</span> ThreadLocalHoldCounter();</span><br><span class="line">            setState(getState()); <span class="comment">// ensures visibility of readHolds</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            <span class="keyword">int</span> nextc = getState() - releases;</span><br><span class="line">            <span class="keyword">boolean</span> free = exclusiveCount(nextc) == <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (free)</span><br><span class="line">                setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(nextc);</span><br><span class="line">            <span class="keyword">return</span> free;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="keyword">int</span> w = exclusiveCount(c);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line">                <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                <span class="comment">// Reentrant acquire</span></span><br><span class="line">                setState(c + acquires);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (writerShouldBlock() ||</span><br><span class="line">                !compareAndSetState(c, c + acquires))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                <span class="comment">// assert firstReaderHoldCount &gt; 0;</span></span><br><span class="line">                <span class="keyword">if</span> (firstReaderHoldCount == <span class="number">1</span>)</span><br><span class="line">                    firstReader = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    firstReaderHoldCount--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                HoldCounter rh = cachedHoldCounter;</span><br><span class="line">                <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                    rh = readHolds.get();</span><br><span class="line">                <span class="keyword">int</span> count = rh.count;</span><br><span class="line">                <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                    readHolds.remove();</span><br><span class="line">                    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> unmatchedUnlockException();</span><br><span class="line">                &#125;</span><br><span class="line">                --rh.count;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> c = getState();</span><br><span class="line">                <span class="keyword">int</span> nextc = c - SHARED_UNIT;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                    <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> IllegalMonitorStateException <span class="title">unmatchedUnlockException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> IllegalMonitorStateException(</span><br><span class="line">                <span class="string">"attempt to unlock read lock, not locked by current thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">                getExclusiveOwnerThread() != current)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> r = sharedCount(c);</span><br><span class="line">            <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class="line">                r &lt; MAX_COUNT &amp;&amp;</span><br><span class="line">                compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    firstReader = current;</span><br><span class="line">                    firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                    firstReaderHoldCount++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    HoldCounter rh = cachedHoldCounter;</span><br><span class="line">                    <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                        cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                        readHolds.set(rh);</span><br><span class="line">                    rh.count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">fullTryAcquireShared</span><span class="params">(Thread current)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            HoldCounter rh = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> c = getState();</span><br><span class="line">                <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (getExclusiveOwnerThread() != current)</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// else we hold the exclusive lock; blocking here</span></span><br><span class="line">                    <span class="comment">// would cause deadlock.</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (readerShouldBlock()) &#123;</span><br><span class="line">                    <span class="comment">// Make sure we're not acquiring read lock reentrantly</span></span><br><span class="line">                    <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                        <span class="comment">// assert firstReaderHoldCount &gt; 0;</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (rh == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            rh = cachedHoldCounter;</span><br><span class="line">                            <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current)) &#123;</span><br><span class="line">                                rh = readHolds.get();</span><br><span class="line">                                <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                                    readHolds.remove();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sharedCount(c) == MAX_COUNT)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sharedCount(c) == <span class="number">0</span>) &#123;</span><br><span class="line">                        firstReader = current;</span><br><span class="line">                        firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                        firstReaderHoldCount++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (rh == <span class="keyword">null</span>)</span><br><span class="line">                            rh = cachedHoldCounter;</span><br><span class="line">                        <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                            rh = readHolds.get();</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                            readHolds.set(rh);</span><br><span class="line">                        rh.count++;</span><br><span class="line">                        cachedHoldCounter = rh; <span class="comment">// cache for release</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> w = exclusiveCount(c);</span><br><span class="line">                <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (w == MAX_COUNT)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!compareAndSetState(c, c + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReadLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> c = getState();</span><br><span class="line">                <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">                    getExclusiveOwnerThread() != current)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">int</span> r = sharedCount(c);</span><br><span class="line">                <span class="keyword">if</span> (r == MAX_COUNT)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                        firstReader = current;</span><br><span class="line">                        firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                        firstReaderHoldCount++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        HoldCounter rh = cachedHoldCounter;</span><br><span class="line">                        <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                            cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                            readHolds.set(rh);</span><br><span class="line">                        rh.count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> ConditionObject <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Thread <span class="title">getOwner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ((exclusiveCount(getState()) == <span class="number">0</span>) ?</span><br><span class="line">                    <span class="keyword">null</span> :</span><br><span class="line">                    getExclusiveOwnerThread());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getReadLockCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sharedCount(getState());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isWriteLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> exclusiveCount(getState()) != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getWriteHoldCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> isHeldExclusively() ? exclusiveCount(getState()) : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getReadHoldCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (getReadLockCount() == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">if</span> (firstReader == current)</span><br><span class="line">                <span class="keyword">return</span> firstReaderHoldCount;</span><br><span class="line"></span><br><span class="line">            HoldCounter rh = cachedHoldCounter;</span><br><span class="line">            <span class="keyword">if</span> (rh != <span class="keyword">null</span> &amp;&amp; rh.tid == getThreadId(current))</span><br><span class="line">                <span class="keyword">return</span> rh.count;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> count = readHolds.get().count;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) readHolds.remove();</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            s.defaultReadObject();</span><br><span class="line">            readHolds = <span class="keyword">new</span> ThreadLocalHoldCounter();</span><br><span class="line">            setState(<span class="number">0</span>); <span class="comment">// reset to unlocked state</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> getState(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8159625535654395037L</span>;</span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// writers can always barge</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> apparentlyFirstQueuedIsExclusive();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2274990926593161451L</span>;</span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5992448646407690164L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">ReadLock</span><span class="params">(ReentrantReadWriteLock lock)</span> </span>&#123;</span><br><span class="line">            sync = lock.sync;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sync.acquireShared(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sync.tryReadLock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sync.tryAcquireSharedNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> r = sync.getReadLockCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.toString() +</span><br><span class="line">                <span class="string">"[Read locks = "</span> + r + <span class="string">"]"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4992448646407690164L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">WriteLock</span><span class="params">(ReentrantReadWriteLock lock)</span> </span>&#123;</span><br><span class="line">            sync = lock.sync;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sync.acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sync.tryWriteLock();</span><br><span class="line">        &#125;</span><br><span class="line">rows NullPointerException <span class="keyword">if</span> the time unit is <span class="keyword">null</span></span><br><span class="line">         */</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sync.release(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Thread o = sync.getOwner();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.toString() + ((o == <span class="keyword">null</span>) ?</span><br><span class="line">                                       <span class="string">"[Unlocked]"</span> :</span><br><span class="line">                                       <span class="string">"[Locked by thread "</span> + o.getName() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHeldByCurrentThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHoldCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sync.getWriteHoldCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isFair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync <span class="keyword">instanceof</span> FairSync;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Thread <span class="title">getOwner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getOwner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getReadLockCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getReadLockCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWriteLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isWriteLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWriteLockedByCurrentThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWriteHoldCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getWriteHoldCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getReadHoldCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getReadHoldCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Collection&lt;Thread&gt; <span class="title">getQueuedWriterThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getExclusiveQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Collection&lt;Thread&gt; <span class="title">getQueuedReaderThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getSharedQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.hasQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedThread</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isQueued(thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getQueueLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getQueueLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Collection&lt;Thread&gt; <span class="title">getQueuedThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getQueuedThreads();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasWaiters</span><span class="params">(Condition condition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (condition == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (!(condition <span class="keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"not owner"</span>);</span><br><span class="line">        <span class="keyword">return</span> sync.hasWaiters((AbstractQueuedSynchronizer.ConditionObject)condition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWaitQueueLength</span><span class="params">(Condition condition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (condition == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (!(condition <span class="keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"not owner"</span>);</span><br><span class="line">        <span class="keyword">return</span> sync.getWaitQueueLength((AbstractQueuedSynchronizer.ConditionObject)condition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Collection&lt;Thread&gt; <span class="title">getWaitingThreads</span><span class="params">(Condition condition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (condition == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (!(condition <span class="keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"not owner"</span>);</span><br><span class="line">        <span class="keyword">return</span> sync.getWaitingThreads((AbstractQueuedSynchronizer.ConditionObject)condition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = sync.getCount();</span><br><span class="line">        <span class="keyword">int</span> w = Sync.exclusiveCount(c);</span><br><span class="line">        <span class="keyword">int</span> r = Sync.sharedCount(c);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() +</span><br><span class="line">            <span class="string">"[Write locks = "</span> + w + <span class="string">", Read locks = "</span> + r + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getThreadId</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.getLongVolatile(thread, TID_OFFSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TID_OFFSET;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            Class&lt;?&gt; tk = Thread.class;</span><br><span class="line">            TID_OFFSET = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">"tid"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程间通信</title>
      <link href="/2019/10/03/%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/10/03/%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><h3 id="一、volatile-和-synchronized-关键字"><a href="#一、volatile-和-synchronized-关键字" class="headerlink" title="一、volatile 和 synchronized 关键字"></a>一、volatile 和 synchronized 关键字</h3><h4 id="1-volatile"><a href="#1-volatile" class="headerlink" title="1. volatile"></a>1. volatile</h4><blockquote><p>用于修饰字段，以此通知程序对该变量的访问都必须从共享内存中获取，对他的改变也必须同步刷新会共享内存，能保证所有线程对变量访问的可见性</p></blockquote><p><strong>注</strong> 过多使用 <em>volatile</em>，会降低程序的执行效率</p><h4 id="2-synchronized"><a href="#2-synchronized" class="headerlink" title="2. synchronized"></a>2. synchronized</h4><blockquote><p>用于修饰方法或者一同步代码块的形式来运用，主要用于确保多个线程在同一时刻，只有一个线程能够处于方法或同步块中，保证线程对变量访问的可见性和排他性</p></blockquote><h4 id="3-对象监视器-synchronized"><a href="#3-对象监视器-synchronized" class="headerlink" title="3. 对象监视器 (synchronized)"></a>3. 对象监视器 (synchronized)</h4><blockquote><p>每一个对象都拥有自己的监视器，当这个对象由同步代码块调用或这个对象的同步方法调用时，执行方法的线程必须先获取到该对象的监视器才能进入同步代码块或者同步方法，而没有获取到监视器的线程将会被阻塞在同步方法块或者同步方法的入口处</p></blockquote><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%9B%91%E8%A7%86%E5%99%A8%E3%80%81%E7%BA%BF%E7%A8%8B.png" alt="对象、监视器、线程关系图"></p><h3 id="二、等待-通知机制"><a href="#二、等待-通知机制" class="headerlink" title="二、等待/通知机制"></a>二、等待/通知机制</h3><blockquote><p>线程A调用了对象O的 <em>wait()</em> 方法后进入等待状态，另外的线程调用了O的 <em>notify()</em> 或 <em>notifyAll()*方法，线程A收到通知后从 *wait()</em> 返回，继续执行后续操作</p></blockquote><h4 id="1-Object中于等待-通知相关的方法"><a href="#1-Object中于等待-通知相关的方法" class="headerlink" title="1. Object中于等待/通知相关的方法"></a>1. Object中于等待/通知相关的方法</h4><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><em>notify()</em></td><td>通知一个在对象上等待的线程，使其从 <em>wait()</em> 方法返回，返回的前提是该线程获取到该对象的锁</td></tr><tr><td><em>notifyAll()</em></td><td>通知所有等待在该对象上的线程</td></tr><tr><td><em>wait()</em></td><td>调用此方法后进入 <strong><em>WAITTTING</em></strong> 状态，只有等待其他线程通知或中断才会返回，调用此方法后，会释放对象的锁88</td></tr><tr><td><em>wait(long)</em></td><td>超时等待</td></tr><tr><td><em>wait(long, int)</em></td><td>超时等待，对事件更加精准的把控</td></tr></tbody></table><h4 id="2-等待-通知机制"><a href="#2-等待-通知机制" class="headerlink" title="2. 等待/通知机制"></a>2. 等待/通知机制</h4><p><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/%E7%AD%89%E5%BE%85%E9%80%9A%E7%9F%A5%E6%9C%BA%E5%88%B6.png" alt="等待通知机制"></p><h4 id="3-Thread-join"><a href="#3-Thread-join" class="headerlink" title="3. Thread.join()"></a>3. Thread.join()</h4><blockquote><p>如果线程A执行了 <em>thread.join()</em> ，则线程A等待thread线程终止后才从 <em>thread.join()</em> 返回执行后续操作</p></blockquote><ul><li><em>Thread.join()</em> 源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 判断当前线程是否终止（执行结束）</span></span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见数据结构</title>
      <link href="/2019/10/01/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2019/10/01/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux命令行</title>
      <link href="/2019/10/01/linux-%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2019/10/01/linux-%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java内存模型</title>
      <link href="/2019/10/01/jvm-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/10/01/jvm-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/运行时内存.png" alt="运行时内存" style="zoom:75%;"><h3 id="一、程序计数器-记录程序运行的位置"><a href="#一、程序计数器-记录程序运行的位置" class="headerlink" title="一、程序计数器(记录程序运行的位置)"></a>一、程序计数器(记录程序运行的位置)</h3><ul><li>程序计数器是一块较小的内存空间，可以看作当前线程所执行的字节码的行号指示器</li><li>字节码解释器工作室就是通过改变计数器的值来选择下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖计数器来完成</li><li>java多线程是通过时间切片来分配线程执行的，当一个线程的时间片耗尽时，就需要有一个记录线程的运行记录，方便下一次轮转到此线程执行时可以从上一次挂起的位置继续执行，因此，每一个线程都需要有一个计数器，且线程中计数器是线程隔离的，互不影响，为线程私有</li><li>执行Java方法时，计数器记录的是正在执行的字节码指令的地址，执行native方法时，计数器为空。</li></ul><h3 id="二、java虚拟机栈"><a href="#二、java虚拟机栈" class="headerlink" title="二、java虚拟机栈"></a>二、java虚拟机栈</h3><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/虚拟机栈.png" alt="虚拟机栈" style="zoom:80%;"><h4 id="1-Java虚拟机栈"><a href="#1-Java虚拟机栈" class="headerlink" title="1. Java虚拟机栈"></a>1. Java虚拟机栈</h4><ul><li>是线程私有的，生命周期于线程相同。虚拟机栈描述的时java方法执行的内存模型，每个方法在执行的同时都会同时都会创建一个栈帧(Stack Frame)用于储存局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法的调用到完成就相当于一个栈帧在虚拟机中入栈到出栈的过</li></ul><h4 id="2-局部变量表"><a href="#2-局部变量表" class="headerlink" title="2. 局部变量表"></a>2. 局部变量表</h4><ul><li>存放编译期可知的各种基本数据类型、对象引用(对象引用指针或对象句柄)、returnAddress类型(指向了一条字节码指令的地址)</li><li>long和double类型的数据会占据两个局部变量空间(Slot),其余的数据类型都只占用一个，局部变量表所虚空见在编译期间完分配，当进入一个方法时，这个方法在帧中需要分配的局部变量空间是确定的，方法运行期间不会改变</li></ul><h4 id="3-会抛异常：StackOverflowError和OutOfMemoryError"><a href="#3-会抛异常：StackOverflowError和OutOfMemoryError" class="headerlink" title="3.会抛异常：StackOverflowError和OutOfMemoryError"></a>3.会抛异常：StackOverflowError和OutOfMemoryError</h4><h3 id="三、本地方法栈-Native-Method-Stack"><a href="#三、本地方法栈-Native-Method-Stack" class="headerlink" title="三、本地方法栈(Native Method Stack)"></a>三、本地方法栈(Native Method Stack)</h3><blockquote><p>为虚拟机使用到的Native方法服务，虚拟机规范中对本地方法栈中方法使用的语言、使用方式、与数据结构没有强制规定。</p></blockquote><blockquote><p>有的虚拟机(如hotspot)直接将本地方法栈于虚拟机栈合二为一</p></blockquote><p><strong>注</strong> 会抛异常：StackOverflowError和OutOfMemoryError</p><h3 id="四、java堆-Java-Heap"><a href="#四、java堆-Java-Heap" class="headerlink" title="四、java堆(Java Heap)"></a>四、java堆(Java Heap)</h3><blockquote><p>java堆是java虚拟机所管理的内存中最大的一块，所有线程共享，在虚拟机启动时创建，唯一作用就是存放对象实例，是垃圾收集器管理的主要区域</p></blockquote><h3 id="五、方法区-Non-Heap"><a href="#五、方法区-Non-Heap" class="headerlink" title="五、方法区(Non-Heap)"></a>五、方法区(Non-Heap)</h3><h4 id="1-线程共享的区域"><a href="#1-线程共享的区域" class="headerlink" title="1. 线程共享的区域"></a>1. 线程共享的区域</h4><blockquote><p>储存已被虚拟机加载的<strong>类信息【全限定类(包名.类名）、直接父类。全限定类名、直接接口的有序列表、修饰符】、常量、静态变量、即时编译器编译后的代码等数据</strong>等</p></blockquote><h4 id="2-运行时常量池"><a href="#2-运行时常量池" class="headerlink" title="2. 运行时常量池"></a>2. 运行时常量池</h4><blockquote><p>存放编译器生成的各种字面量和符号引用，在类加载后进入方法区运行时常量池存放</p></blockquote><h5 id="六、直接内存"><a href="#六、直接内存" class="headerlink" title="六、直接内存"></a>六、直接内存</h5><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="一、创建对象时的内存分配"><a href="#一、创建对象时的内存分配" class="headerlink" title="一、创建对象时的内存分配"></a>一、创建对象时的内存分配</h3><h4 id="1-内存分配"><a href="#1-内存分配" class="headerlink" title="1. 内存分配"></a>1. 内存分配</h4><ol><li><p>指针碰撞</p><blockquote><p>绝对规整的堆内存，已使用的内存与未使用的内存通过一个指针分隔开，两种内存不交叉，分配仅将指针移动与对象大小相等的距离即可</p></blockquote><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/内存分配-指针碰撞.png" alt="内存分配-指针碰撞" style="zoom:75%;"></li><li><p>空闲列表</p><blockquote><p>内存不规整，已使用与未使用内存相互交叉，使用一个链表记录未使用的内存空间，分配对象内存时从链表中寻找一块足够大的内存进行划分</p></blockquote><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/内存分配-空闲列表.png" alt="内存分配-空闲列表" style="zoom:80%;"></li></ol><h3 id="二、对象的内存布局-HotSpot"><a href="#二、对象的内存布局-HotSpot" class="headerlink" title="二、对象的内存布局(HotSpot)"></a>二、对象的内存布局(HotSpot)</h3><h4 id="1-对象头"><a href="#1-对象头" class="headerlink" title="1. 对象头"></a>1. 对象头</h4><ol><li>储存对象自身的运行时数据(Mark Word)，如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等</li><li>类型指针，即对象指向它的类元数据的指针，虚拟机由此确定该对象属于哪个类</li></ol><h4 id="2-实例数据"><a href="#2-实例数据" class="headerlink" title="2. 实例数据"></a>2. 实例数据</h4><ul><li>对象真正储存的有效信息</li></ul><h4 id="3-对齐填充"><a href="#3-对齐填充" class="headerlink" title="3. 对齐填充"></a>3. 对齐填充</h4><ul><li>使整个对象所占内存为8字节的整数倍，当占位符使用</li></ul><h3 id="三、访问定位"><a href="#三、访问定位" class="headerlink" title="三、访问定位"></a>三、访问定位</h3><h4 id="1-句柄访问-稳定"><a href="#1-句柄访问-稳定" class="headerlink" title="1. 句柄访问(稳定)"></a>1. 句柄访问(稳定)</h4><blockquote><p>java堆中将划分一块内存作为句柄池，对象引用储存对象句柄地址，句柄中包含对象实例数据以及类型数据各自的具体地址信息</p></blockquote><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/句柄访问.png" alt="句柄访问" style="zoom:75%;"><h4 id="2-直接指针访问-hotspot使用，定位速度快"><a href="#2-直接指针访问-hotspot使用，定位速度快" class="headerlink" title="2. 直接指针访问(hotspot使用，定位速度快)"></a>2. 直接指针访问(hotspot使用，定位速度快)</h4><blockquote><p>引用类型存放Java堆对象地址，堆对象需考虑如何放置对象类型数据</p></blockquote><img src="https://raw.githubusercontent.com/CCanyong/pictures/master/直接指针访问.png" alt="直接指针访问" style="zoom:75%;">]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程简介</title>
      <link href="/2019/10/01/%E5%B9%B6%E5%8F%91-java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/10/01/%E5%B9%B6%E5%8F%91-java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><h3 id="一、线程和进程"><a href="#一、线程和进程" class="headerlink" title="一、线程和进程"></a>一、线程和进程</h3><blockquote><p>对于操作系统而言，但我们启动一个程序的时候，就相当于创建了一个进程，一个进程就是一个任务，每一个进程内部，至少需要有一个线程维持运行，线程时操作系统调度的最小单元，每一个进程都可以拥有多个线程，而每个线程都拥有各自的计数器、堆、栈和局部变量表等属性，同时也能访问共享变量</p></blockquote><h3 id="二、为什么要使用多线程"><a href="#二、为什么要使用多线程" class="headerlink" title="二、为什么要使用多线程"></a>二、为什么要使用多线程</h3><h4 id="1-更多的处理器核心"><a href="#1-更多的处理器核心" class="headerlink" title="1. 更多的处理器核心"></a>1. 更多的处理器核心</h4><blockquote><p>一个线程在一个时刻只能运行在一个处理器核心上，那么多线程就是用来解决如何充分利用多处理核心这个问题的</p></blockquote><h4 id="2-更快的响应时间"><a href="#2-更快的响应时间" class="headerlink" title="2. 更快的响应时间"></a>2. 更快的响应时间</h4><blockquote><p>当有比较复杂的业务操作时，使用多线程技术，将数据一致性不强的操作分发给其他线程处理，可以很大程度的缩短响应时间</p></blockquote><h4 id="3-更好的编程模型"><a href="#3-更好的编程模型" class="headerlink" title="3 . 更好的编程模型"></a>3 . 更好的编程模型</h4><blockquote><p>java为多线程提供了良好、考究且一致的编程模型</p></blockquote><h3 id="三、线程优先级"><a href="#三、线程优先级" class="headerlink" title="三、线程优先级"></a>三、线程优先级</h3><blockquote><p>现代操作系统基本都是采用时分形式调度运行的线程，操作系统分出一个个时间片，当当前线程的时间片用完之后，就会发挥发生一次线程调度，因此，线程分配到的时间片多少决定了他占用的处理器资源，而<strong>线程优先级</strong>就是决定分配处理器资源多少的属性</p></blockquote><blockquote><p>java线程中，整形变量<strong>priority</strong>控制优先级，<strong>范围1-10，默认为5</strong>，可以使用<strong>setPriority()</strong>方法设置优先级。设置线程优先级时，针对频繁阻塞(休眠或IO)的线程需要设置较高优先级，而偏重计算的线程则需要设置较低的优先级，确保cpu不会被独占</p></blockquote><h3 id="四、线程的状态"><a href="#四、线程的状态" class="headerlink" title="四、线程的状态"></a>四、线程的状态</h3><blockquote><p>java线程在运行的生命周期中可能处于6中不同的状态，在某一时刻只能处于其中一种状态</p></blockquote><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>NEW</td><td>初始状态，线程被构建，还没有调用 <strong>start()</strong> 方法</td></tr><tr><td>RUNNABLE</td><td>运行状态，java线程将操作系统中的就绪和运行状态通称为<strong>运行中</strong></td></tr><tr><td>BLOCKED</td><td>阻塞状态，表明当前线程阻塞于锁</td></tr><tr><td>WAITING</td><td>等待状态，此状态下，当前线程需等待其他线程通知和中断</td></tr><tr><td>TIME_WAITING</td><td>超时等待状态，区别于等待状态，增加了一个超时返回</td></tr><tr><td>TERMINATED</td><td>终止状态，线程执行完毕</td></tr></tbody></table><!-- 状态图 --><h3 id="五、守护线程"><a href="#五、守护线程" class="headerlink" title="五、守护线程"></a>五、守护线程</h3><blockquote><p>守护线程是一种支持型线程，主要被用于程序中的后台调度以及支持性工作。当一个java虚拟机中不存在非守护线程时，java虚拟机将会退出。可通过 <strong>setDeamon(true)</strong> 将线程设置为守护线程</p></blockquote><p><strong>注：</strong>Deamon属性需在线程启动前设置，启动后设置无效</p><h2 id="启动和终止线程"><a href="#启动和终止线程" class="headerlink" title="启动和终止线程"></a>启动和终止线程</h2><h3 id="一、创建线程"><a href="#一、创建线程" class="headerlink" title="一、创建线程"></a>一、创建线程</h3><h4 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1. 继承Thread类"></a>1. 继承Thread类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">// 重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行线程MyThread1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2. 实现Runnable接口"></a>2. 实现Runnable接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行线程MyThread2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-lambda表达式-Runnable接口"><a href="#3-lambda表达式-Runnable接口" class="headerlink" title="3. lambda表达式(Runnable接口)"></a>3. lambda表达式(Runnable接口)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Runnable是一个函数式接口，故可以使用lambda表达时</span></span><br><span class="line">Runnable runnable = () -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"lambda表达式创建线程"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二、线程初始化"><a href="#二、线程初始化" class="headerlink" title="二、线程初始化"></a>二、线程初始化</h3><h4 id="1-Thread类中的初始化方法"><a href="#1-Thread类中的初始化方法" class="headerlink" title="1. Thread类中的初始化方法"></a>1. Thread类中的初始化方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">long</span> stackSize, AccessControlContext acc,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">boolean</span> inheritThreadLocals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name cannot be null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 设置线程名称</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="comment">// 当前线程，即创建子线程的线程是父线程</span></span><br><span class="line">    Thread parent = currentThread();</span><br><span class="line">    SecurityManager security = System.getSecurityManager();</span><br><span class="line">  <span class="comment">// 设置线程组</span></span><br><span class="line">    <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">            g = security.getThreadGroup();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</span><br><span class="line">            g = parent.getThreadGroup();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    g.checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isCCLOverridden(getClass())) &#123;     </span><br><span class="line">            security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    g.addUnstarted();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.group = g;</span><br><span class="line">    <span class="comment">// 默认守护线程属性与父线程相同</span></span><br><span class="line">    <span class="keyword">this</span>.daemon = parent.isDaemon();</span><br><span class="line">    <span class="comment">// 优先级于父线程相同</span></span><br><span class="line">    <span class="keyword">this</span>.priority = parent.getPriority();</span><br><span class="line">   <span class="comment">// 设置线程上下文类加载器</span></span><br><span class="line">    <span class="keyword">if</span> (security == <span class="keyword">null</span> || isCCLOverridden(parent.getClass()))            </span><br><span class="line">        <span class="keyword">this</span>.contextClassLoader = parent.getContextClassLoader();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">this</span>.contextClassLoader = parent.contextClassLoader;</span><br><span class="line">    <span class="keyword">this</span>.inheritedAccessControlContext =</span><br><span class="line">            acc != <span class="keyword">null</span> ? acc : AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">    setPriority(priority);</span><br><span class="line">    <span class="keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">this</span>.inheritableThreadLocals =</span><br><span class="line">            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class="line">    <span class="comment">// 栈大小</span></span><br><span class="line"><span class="keyword">this</span>.stackSize = stackSize;</span><br><span class="line"><span class="comment">// 设之线程Id</span></span><br><span class="line">    tid = nextThreadID();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、启动线程"><a href="#三、启动线程" class="headerlink" title="三、启动线程"></a>三、启动线程</h3><blockquote><p>当线程初始化完成后，当前线程即(parent线程)调用子线程的start()方法来通知jvm启动线程</p></blockquote><p><strong>注</strong> 调用start()方法而不是run()方法，start方法才会创建新线程，run方法只是相当于普通方法调用</p><h3 id="四、线程中断"><a href="#四、线程中断" class="headerlink" title="四、线程中断"></a>四、线程中断</h3><blockquote><p>线程中断是线程的一个标识位属性，它表示一个线程是否被另一个线程进行了中断操作,其他线程通过调用该线程的interrupt()来对其进行中断操作</p></blockquote><blockquote><p>设置中断后，线程内部可以捕获<strong>InterruptedException</strong>，线程调用 <em>sleep()、wait()、join()</em> 方法会进入<strong>阻塞状态</strong>，这些方法会检测线程的中断标识，如果为true，则抛出 <em>InterruptedException</em></p></blockquote><h3 id="五、终止线程"><a href="#五、终止线程" class="headerlink" title="五、终止线程"></a>五、终止线程</h3><ul><li>使用一个自定义标识位，不断检测</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 运行标识位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunning</span><span class="params">(<span class="keyword">boolean</span> running)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.running = running;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 线程停止运行或中断时退出循环</span></span><br><span class="line">        <span class="keyword">while</span> (running &amp;&amp; !Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql基本使用</title>
      <link href="/2019/10/01/mysql-1%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/10/01/mysql-1%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、DDL"><a href="#一、DDL" class="headerlink" title="一、DDL"></a>一、DDL</h3><blockquote><p><strong><em>DATA DEFINITION LANGUAGES</em></strong> （数据定义语言），这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象。常用的语句关键字主要包括 <em>CREATE、DROP、ALTER</em> 等。</p></blockquote><h4 id="1-数据库定义"><a href="#1-数据库定义" class="headerlink" title="1. 数据库定义"></a>1. 数据库定义</h4><h5 id="1-1-查看数据库"><a href="#1-1-查看数据库" class="headerlink" title="1.1 查看数据库"></a>1.1 查看数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="1-2-创建数据库"><a href="#1-2-创建数据库" class="headerlink" title="1.2 创建数据库"></a>1.2 创建数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建名为learn_mysql的数据库</span><br><span class="line"><span class="meta">mysql&gt;</span> CREATE DATABASE learn_mysql;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="1-3-删除数据库"><a href="#1-3-删除数据库" class="headerlink" title="1.3 删除数据库"></a>1.3 删除数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 删除数据库</span><br><span class="line"><span class="meta">mysql&gt;</span> DROP DATABASE learn_mysql;</span><br><span class="line">Query OK, 1 row affected (0.27 sec)</span><br></pre></td></tr></table></figure><h5 id="1-4-使用数据库"><a href="#1-4-使用数据库" class="headerlink" title="1.4 使用数据库"></a>1.4 使用数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用learn_mysql数据库</span><br><span class="line"><span class="meta">mysql&gt;</span> USE learn_mysql;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h4 id="2-数据表定义"><a href="#2-数据表定义" class="headerlink" title="2. 数据表定义"></a>2. 数据表定义</h4><h5 id="2-1-列出当前数据库所有数据表"><a href="#2-1-列出当前数据库所有数据表" class="headerlink" title="2.1 列出当前数据库所有数据表"></a>2.1 列出当前数据库所有数据表</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SHOW TABLES;</span><br><span class="line">+-----------------------+</span><br><span class="line">| Tables_in_learn_mysql |</span><br><span class="line">+-----------------------+</span><br><span class="line">| test1                 |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.39 sec)</span><br></pre></td></tr></table></figure><h5 id="2-2-创建数据表"><a href="#2-2-创建数据表" class="headerlink" title="2.2 创建数据表"></a>2.2 创建数据表</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span>  CREATE TABLE `test1` (</span><br><span class="line"><span class="meta">#</span> 字段名 数据类型 约束条件</span><br><span class="line"><span class="meta">  -&gt;</span> `id` int(11) NOT NULL, </span><br><span class="line"><span class="meta">  -&gt;</span> `name` char(10) NOT NULL,</span><br><span class="line"><span class="meta">  -&gt;</span> `age` int(11) DEFAULT NULL</span><br><span class="line"><span class="meta">  #</span> ENGINE（存储引擎） CHARSET(字符集)</span><br><span class="line"><span class="meta">-&gt;</span> ) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure><h5 id="2-3-查看表详情-字段信息"><a href="#2-3-查看表详情-字段信息" class="headerlink" title="2.3 查看表详情(字段信息)"></a>2.3 查看表详情(字段信息)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> DESC test1;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)  | NO   |     | NULL    |       |</span><br><span class="line">| name  | char(10) | NO   |     | NULL    |       |</span><br><span class="line">| age   | int(11)  | YES  |     | NULL    |       |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="2-4-查看表定义"><a href="#2-4-查看表定义" class="headerlink" title="2.4 查看表定义"></a>2.4 查看表定义</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SHOW CREATE TABLE test1;</span><br><span class="line">+-------+------------------------------------------------------------------+</span><br><span class="line">| Table | Create Table                                                     |</span><br><span class="line">+-------+------------------------------------------------------------------+</span><br><span class="line">| test1 | CREATE TABLE `test1` (</span><br><span class="line">            `id` int(11) NOT NULL,</span><br><span class="line">            `name` char(10) NOT NULL,</span><br><span class="line">            `age` int(11) DEFAULT NULL</span><br><span class="line">          ) ENGINE=InnoDB DEFAULT CHARSET=utf8 |</span><br><span class="line">+-------+------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="2-5-删除表"><a href="#2-5-删除表" class="headerlink" title="2.5 删除表"></a>2.5 删除表</h5><blockquote><p>DROP TABLE table_name</p></blockquote><h5 id="2-6-修改表"><a href="#2-6-修改表" class="headerlink" title="2.6 修改表"></a>2.6 修改表</h5><ol><li><p>修改字段类型</p><blockquote><p>ALTER TABLE table_name <strong>MODIFY</strong> [COLUMN] col_def [FIRST | AFTER col_name]</p></blockquote></li><li><p>添加字段</p><blockquote><p>ALTER TABLE table_name <strong>ADD</strong> [COLUMN] col_def [FIRST | AFTER col_name]</p></blockquote></li><li><p>删除字段</p><blockquote><p>ALTER TABLE table_name <strong>DROP</strong> [COLUMN] col_name</p></blockquote></li><li><p>字段重命名</p><blockquote><p>ALTER TABLE table_name <strong>CHANGE</strong> old_col_name col_def</p></blockquote></li><li><p>修改表名</p><blockquote><p>ALTER TABLE table_name RENAME [TO] new_name</p></blockquote></li></ol><h3 id="二、DML"><a href="#二、DML" class="headerlink" title="二、DML"></a>二、DML</h3><blockquote><p><strong><em>Data Manipulation Language</em></strong> （数据操纵语句），用于添加、删除、更新和查询数据库记录，并检查数据完整性。常用的语句关键字主要包括 <em>INSERT、DELETE、UPDATE、SELECT</em> 等。</p></blockquote><h4 id="1-插入数据-INSERT"><a href="#1-插入数据-INSERT" class="headerlink" title="1. 插入数据 (INSERT)"></a>1. 插入数据 (INSERT)</h4><h5 id="1-1-插入单条记录"><a href="#1-1-插入单条记录" class="headerlink" title="1.1 插入单条记录"></a>1.1 插入单条记录</h5><blockquote><p>INSERT INTO table_name(col_name,…) VALUES(col_value,…);</p></blockquote><h5 id="1-2-插入多条记录"><a href="#1-2-插入多条记录" class="headerlink" title="1.2 插入多条记录"></a>1.2 插入多条记录</h5><blockquote><p>INSERT INTO table_name(col_name,…) VALUES(col_value,…),(col_value,…),…;</p></blockquote><h4 id="2-修改数据-UPDATE"><a href="#2-修改数据-UPDATE" class="headerlink" title="2. 修改数据 (UPDATE)"></a>2. 修改数据 (UPDATE)</h4><h5 id="2-1-修改单表数据"><a href="#2-1-修改单表数据" class="headerlink" title="2.1 修改单表数据"></a>2.1 修改单表数据</h5><blockquote><p>UPDATE table_name SET field1=val1,field2=val2,… [WHERE CONDITION]; </p></blockquote><h5 id="2-2-多表数据同时修改"><a href="#2-2-多表数据同时修改" class="headerlink" title="2.2 多表数据同时修改"></a>2.2 多表数据同时修改</h5><blockquote><p>UPDATE t1,t2,…,tn SET t1.field1=val1 ,t2.filed1=val2,..[WHERE CONDITION];</p></blockquote><h4 id="3-删除数据-DELETE"><a href="#3-删除数据-DELETE" class="headerlink" title="3. 删除数据 (DELETE)"></a>3. 删除数据 (DELETE)</h4><h5 id="3-1-删除单表数据"><a href="#3-1-删除单表数据" class="headerlink" title="3.1 删除单表数据"></a>3.1 删除单表数据</h5><blockquote><p>DELETE FROM TABLE [WHERE CONDITION];</p></blockquote><h5 id="3-2-多表数据同时删除"><a href="#3-2-多表数据同时删除" class="headerlink" title="3.2 多表数据同时删除"></a>3.2 多表数据同时删除</h5><blockquote><p>DELETE FROM t1,t2,…,tn [WHERE CONDITION];</p></blockquote><h4 id="4-查询"><a href="#4-查询" class="headerlink" title="4. 查询"></a>4. 查询</h4><h5 id="4-1-简单查询"><a href="#4-1-简单查询" class="headerlink" title="4.1 简单查询"></a>4.1 简单查询</h5><ol><li><p>查询所有记录</p><blockquote><p>SELECT * FROM table_name</p></blockquote></li><li><p>记录去重</p><blockquote><p>SELECT DISTINCT col_name(可以为*) FROM table_name</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询所有记录</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ccy1 |   12 |</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">|  3 | ccy  |   16 |</span><br><span class="line">|  4 | ccy  |   16 |</span><br><span class="line">+----+------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 查询所有记录并去除完全重复记录</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT DISTINCT * FROM test1;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ccy1 |   12 |</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">|  3 | ccy  |   16 |</span><br><span class="line">|  4 | ccy  |   16 |</span><br><span class="line">+----+------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 查询name字段数据并去重</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT DISTINCT name FROM test1;</span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| ccy1 |</span><br><span class="line">| ccy2 |</span><br><span class="line">| ccy  |</span><br><span class="line">+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>条件查询</p><blockquote><p>SELECT * FROM table_name [WHERE CONDITION]</p></blockquote><table><thead><tr><th>条件运算符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>相等</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>!= (&lt;&gt;)</td><td>不等于</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1 WHERE name='ccy';</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  3 | ccy  |   16 |</span><br><span class="line">|  4 | ccy  |   16 |</span><br><span class="line">+----+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>排序</p><blockquote><p>关键字ORDER BY来实现，DESC和ASC是排序顺序关键字，DESC表示按照字段进行降序排列，ASC则表示升序排列，如果不写此关键字默认是升序排列。ORDER BY后面可以跟多个不同的排序字段，并且每个排序字段可以有不同的排序顺序，按照字段顺序作为排序依据</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 语法格式</span><br><span class="line"><span class="meta">#</span> SELECT * FROM table_name [WHERE CONFITION] [ORDER BY] col_name</span><br><span class="line"><span class="meta">#</span> [DESC|ASC],col_name2 [DESC|ASC],...,col_namen [DESC|ASC]</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1 ORDER BY id DESC;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  4 | ccy  |   16 |</span><br><span class="line">|  3 | ccy  |   16 |</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">|  1 | ccy1 |   12 |</span><br><span class="line">+----+------+------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>记录条数限制</p><blockquote><p>SELECT * FROM table_name [LIMIT start, end]</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 默认情况下，其实偏移量为0，数字为记录条数</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1 LIMIT 2;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ccy1 |   12 |</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">+----+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 从第一条到第三条（从0开始计算）</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1 LIMIT 1,3;</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">|  3 | ccy  |   16 |</span><br><span class="line">|  4 | ccy  |   16 |</span><br><span class="line">+----+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>聚合函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 语法</span><br><span class="line"><span class="meta">#</span> SELECT [col_1,col_2,...,col_n] fun_name FROM table_name</span><br><span class="line"><span class="meta">#</span> [WHERE CONDITION] [GROUP BY col_1,...,col_n [WITH ROLLUP]]</span><br><span class="line"><span class="meta">#</span> [HAVING where_condition]</span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT COUNT(*) FROM test1;</span><br><span class="line">+----------+</span><br><span class="line">| COUNT(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        4 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.03 sec)</span><br></pre></td></tr></table></figure></li></ol><h5 id="4-2-多表查询"><a href="#4-2-多表查询" class="headerlink" title="4.2 多表查询"></a>4.2 多表查询</h5><ol><li><p>表连接</p><blockquote><p>表连接分为<strong>内连接</strong>和<strong>外连接</strong>，它们之间的最主要区别是，内连接仅选出两张表中互相匹配的记录，而外连接会选出其他不匹配的记录。常用内连接</p></blockquote></li><li><p>内连接</p><blockquote><p>SELECT * FROM t1, t2 WHERE t1.c1=t2.c1</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1,test2 WHERE test1.id=test2.id;</span><br><span class="line">+----+------+------+----+-------+</span><br><span class="line">| id | name | age  | id | name  |</span><br><span class="line">+----+------+------+----+-------+</span><br><span class="line">|  1 | ccy1 |   12 |  1 | ccy   |</span><br><span class="line">|  2 | ccy2 |   13 |  2 |   ccy |</span><br><span class="line">+----+------+------+----+-------+</span><br><span class="line">2 rows in set (0.28 sec)</span><br></pre></td></tr></table></figure></li><li><p>外连接</p><ul><li><p>左连接</p><blockquote><p>包含所有的左边表中的记录甚至是右边表中没有和它匹配的记录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1 left join test2 on test1.id=test2.id;</span><br><span class="line">+----+------+------+------+-------+</span><br><span class="line">| id | name | age  | id   | name  |</span><br><span class="line">+----+------+------+------+-------+</span><br><span class="line">|  1 | ccy1 |   12 |    1 | ccy   |</span><br><span class="line">|  2 | ccy2 |   13 |    2 |   ccy |</span><br><span class="line">|  3 | ccy  |   16 | NULL | NULL  |</span><br><span class="line">|  4 | ccy  |   16 | NULL | NULL  |</span><br><span class="line">+----+------+------+------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>右连接</p><blockquote><p>包含所有的右边表中的记录甚至是左边表中没有和它匹配的记录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1 right join test2 on test1.id=test2.id;</span><br><span class="line">+------+------+------+----+-------+</span><br><span class="line">| id   | name | age  | id | name  |</span><br><span class="line">+------+------+------+----+-------+</span><br><span class="line">|    1 | ccy1 |   12 |  1 | ccy   |</span><br><span class="line">|    2 | ccy2 |   13 |  2 |   ccy |</span><br><span class="line">+------+------+------+----+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="4-3-子查询"><a href="#4-3-子查询" class="headerlink" title="4.3 子查询"></a>4.3 子查询</h5><blockquote><p>当进行查询的时候，需要的条件是另外一个 <em>select</em> 语句的结果，这个时候，就要用到子查询。用于子查询的关键字主要包括 <em>in、not in、=、!=、exists、not exists</em> 等。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查询test1中与test2的id相同的记录 </span><br><span class="line"><span class="meta">mysql&gt;</span> SELECT * FROM test1 WHERE id in (SELECT id FROM test2);</span><br><span class="line">+----+------+------+</span><br><span class="line">| id | name | age  |</span><br><span class="line">+----+------+------+</span><br><span class="line">|  1 | ccy1 |   12 |</span><br><span class="line">|  2 | ccy2 |   13 |</span><br><span class="line">+----+------+------+</span><br><span class="line">2 rows in set (0.03 sec)</span><br></pre></td></tr></table></figure><h5 id="4-4-记录联合"><a href="#4-4-记录联合" class="headerlink" title="4.4 记录联合"></a>4.4 记录联合</h5><blockquote><p>两个表的数据按照一定的查询条件查询出来后，将结果合并到一起显示出来，这个时候，就需要用 <em>union</em> 和 <em>union all</em> 关键字来实现这样的功能</p></blockquote><ol><li><p>UNION ALL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SELECT name FROM test1 UNION ALL SELECT name FROM test2;</span><br><span class="line">+-------+</span><br><span class="line">| name  |</span><br><span class="line">+-------+</span><br><span class="line">| ccy1  |</span><br><span class="line">| ccy2  |</span><br><span class="line">| ccy   |</span><br><span class="line">| ccy   |</span><br><span class="line">| ccy   |</span><br><span class="line">|   ccy |</span><br><span class="line">+-------+</span><br><span class="line">6 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure></li><li><p>UNION</p><blockquote><p>UNION ALL结果集去重后数据集</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> SELECT name FROM test1 UNION SELECT name FROM test2;</span><br><span class="line">+-------+</span><br><span class="line">| name  |</span><br><span class="line">+-------+</span><br><span class="line">| ccy1  |</span><br><span class="line">| ccy2  |</span><br><span class="line">| ccy   |</span><br><span class="line">|   ccy |</span><br><span class="line">+-------+</span><br><span class="line">4 rows in set (0.05 sec)</span><br></pre></td></tr></table></figure></li></ol><h3 id="三、DCL"><a href="#三、DCL" class="headerlink" title="三、DCL"></a>三、DCL</h3><blockquote><p><strong><em>Data Control Language</em></strong> （数据控制语句），用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的<strong>访问权限和安全级别</strong>。主要的语句关键字包括 <em>DRANT、REVOKE</em> 等。</p></blockquote><h4 id="1-创建数据库用户并指定权限"><a href="#1-创建数据库用户并指定权限" class="headerlink" title="1. 创建数据库用户并指定权限"></a>1. 创建数据库用户并指定权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> GRANT [SELECT|INSERT] ON database_name.table_name to user_name IDENTIFIED</span><br><span class="line"><span class="meta">#</span> BY password</span><br><span class="line"><span class="meta">#</span> 创建用户并赋予权限</span><br><span class="line"><span class="meta">mysql&gt;</span> GRANT SELECT ON learn_mysql.* TO 'ccy'@'localhost' IDENTIFIED BY '123456';</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.06 sec)</span><br><span class="line"><span class="meta">#</span> 以该用户登陆后数据库状态</span><br><span class="line"><span class="meta">mysql&gt;</span> show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| learn_mysql        |</span><br><span class="line">+--------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 插入数据是提示无权限</span><br><span class="line"><span class="meta">mysql&gt;</span> insert into test1 values(10,'cc',10);</span><br><span class="line">ERROR 1142 (42000): INSERT command denied to user 'ccy'@'localhost' for table 'test1'</span><br><span class="line"><span class="meta">#</span> ROOT用户下修改权限</span><br><span class="line"><span class="meta">mysql&gt;</span> GRANT INSERT,SELECT ON learn_mysql.* TO 'ccy'@'localhost';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span> 插入成功</span><br><span class="line"><span class="meta">mysql&gt;</span> insert into test1 values(10,'cc',10);</span><br><span class="line">Query OK, 1 row affected (0.12 sec)</span><br></pre></td></tr></table></figure><h5 id="2-回收权限"><a href="#2-回收权限" class="headerlink" title="2. 回收权限"></a>2. 回收权限</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> REVOKE [INSERT|SELECT] ON database_name.table_name FROM user_name;</span><br><span class="line"><span class="meta">#</span> ROOT用户权限下</span><br><span class="line"><span class="meta">mysql&gt;</span> REVOKE INSERT ON learn_mysql.* FROM 'ccy'@'localhost';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七大原则</title>
      <link href="/2019/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
      <url>/2019/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式——七大原则"><a href="#设计模式——七大原则" class="headerlink" title="设计模式——七大原则"></a>设计模式——七大原则</h2><h3 id="设计模式的作用"><a href="#设计模式的作用" class="headerlink" title="设计模式的作用"></a>设计模式的作用</h3><blockquote><p>设计模式是对软件设计中普遍存在的问题的解决方案，可用于提高软件的<strong>可扩展性</strong>，<strong>可维护性</strong>，<strong>代码重用性</strong>，已达成<strong>高内聚、低耦合</strong></p></blockquote><h3 id="七大原则"><a href="#七大原则" class="headerlink" title="七大原则"></a>七大原则</h3><h4 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h4><blockquote><p>一个类只负责一个职责</p></blockquote><ol><li>降低类的复杂度</li><li>提高类的可读性、可维护性</li><li>降低代码变更引起的风险</li><li>只有逻辑足够简单时，才可违反单一职责原则，在方法上保持单一</li></ol><h4 id="2-接口隔离原则"><a href="#2-接口隔离原则" class="headerlink" title="2. 接口隔离原则"></a>2. 接口隔离原则</h4><blockquote><p>客户端不应该依赖它不需要的接口，即一个类对另一个类的最小依赖应该建立在<strong>最小</strong>接口上</p></blockquote><h4 id="3-依赖倒转原则"><a href="#3-依赖倒转原则" class="headerlink" title="3. 依赖倒转原则"></a>3. 依赖倒转原则</h4><ol><li>高层不应该以来底层模块，而这都应该依赖其抽象(接口或抽象类)</li><li>抽象不应该依赖于细节，细节应该依赖抽象</li><li>中心思想：面向接口编程</li><li>多态的使用</li></ol><h4 id="4-里氏替换原则"><a href="#4-里氏替换原则" class="headerlink" title="4. 里氏替换原则"></a>4. 里氏替换原则</h4><ol><li>所有引用基类的地方，都必须能透明的引用其子类</li><li>子类尽量不要重写父类的方法</li><li>继承会增强耦合性，可通过聚合、组合、依赖来解决问题</li></ol><h4 id="5-开闭原则-核心"><a href="#5-开闭原则-核心" class="headerlink" title="5. 开闭原则(核心)"></a>5. 开闭原则(核心)</h4><blockquote><p>对扩展开放，对修改关闭</p></blockquote><ol><li>用抽象构造框架，用实现扩展细节</li><li>当功能需要变化时，通过扩展而不是修改来实现</li><li>提供方修改扩展时，使用方不需要修改代码</li></ol><h4 id="6-迪米特法则-最少知道原则"><a href="#6-迪米特法则-最少知道原则" class="headerlink" title="6. 迪米特法则(最少知道原则)"></a>6. 迪米特法则(最少知道原则)</h4><ol><li>一个对象应该对其他对象保持最少了解</li><li>类与类之间关系越密切，耦合度越大</li><li>合理的封装，一个类对自己依赖的类知道的越少越好，以此降低耦合度</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat启动过程</title>
      <link href="/2019/10/01/tomcat/"/>
      <url>/2019/10/01/tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><h2 id="1-bootstrap"><a href="#1-bootstrap" class="headerlink" title="1. bootstrap"></a>1. bootstrap</h2><h3 id="1-1-main"><a href="#1-1-main" class="headerlink" title="1.1. main"></a>1.1. main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (daemon == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 实例化bootstrap对象</span></span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化bootstrap</span></span><br><span class="line">            bootstrap.init();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            handleThrowable(t);</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化完成后进行赋值</span></span><br><span class="line">        daemon = bootstrap;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// When running as a service the call to stop will be on a new</span></span><br><span class="line">        <span class="comment">// thread so make sure the correct class loader is used to prevent</span></span><br><span class="line">        <span class="comment">// a range of class not found exceptions.</span></span><br><span class="line">        Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String command = <span class="string">"start"</span>;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            command = args[args.length - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (command.equals(<span class="string">"startd"</span>)) &#123;</span><br><span class="line">            args[args.length - <span class="number">1</span>] = <span class="string">"start"</span>;</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            daemon.start();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stopd"</span>)) &#123;</span><br><span class="line">            args[args.length - <span class="number">1</span>] = <span class="string">"stop"</span>;</span><br><span class="line">            daemon.stop();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) &#123;</span><br><span class="line">            daemon.setAwait(<span class="keyword">true</span>);</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            daemon.start();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                System.exit(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stop"</span>)) &#123;</span><br><span class="line">            daemon.stopServer(args);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"configtest"</span>)) &#123;</span><br><span class="line">            daemon.load(args);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == daemon.getServer()) &#123;</span><br><span class="line">                System.exit(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.warn(<span class="string">"Bootstrap: command \""</span> + command + <span class="string">"\" does not exist."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="comment">// Unwrap the Exception for clearer error reporting</span></span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException &amp;&amp;</span><br><span class="line">                t.getCause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            t = t.getCause();</span><br><span class="line">        &#125;</span><br><span class="line">        handleThrowable(t);</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-init"><a href="#1-2-init" class="headerlink" title="1.2. init"></a>1.2. init</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 设置Catalina路径</span></span><br><span class="line">    setCatalinaHome();</span><br><span class="line">    setCatalinaBase();</span><br><span class="line">    <span class="comment">// 初始化类加载器</span></span><br><span class="line">    initClassLoaders();</span><br><span class="line">    </span><br><span class="line">    Thread.currentThread().setContextClassLoader(catalinaLoader);</span><br><span class="line">    SecurityClassLoad.securityClassLoad(catalinaLoader);</span><br><span class="line">    <span class="comment">// Load our startup class and call its process() method</span></span><br><span class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">        log.debug(<span class="string">"Loading startup class"</span>);</span><br><span class="line">    Class&lt;?&gt; startupClass =</span><br><span class="line">            catalinaLoader.loadClass</span><br><span class="line">                    (<span class="string">"org.apache.catalina.startup.Catalina"</span>);</span><br><span class="line">    Object startupInstance = startupClass.newInstance();</span><br><span class="line">    <span class="comment">// Set the shared extensions class loader</span></span><br><span class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">        log.debug(<span class="string">"Setting startup class properties"</span>);</span><br><span class="line">    String methodName = <span class="string">"setParentClassLoader"</span>;</span><br><span class="line">    Class&lt;?&gt; paramTypes[] = <span class="keyword">new</span> Class[<span class="number">1</span>];</span><br><span class="line">    paramTypes[<span class="number">0</span>] = Class.forName(<span class="string">"java.lang.ClassLoader"</span>);</span><br><span class="line">    Object paramValues[] = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">    paramValues[<span class="number">0</span>] = sharedLoader;</span><br><span class="line">    Method method =</span><br><span class="line">            startupInstance.getClass().getMethod(methodName, paramTypes);</span><br><span class="line">    method.invoke(startupInstance, paramValues);</span><br><span class="line">    catalinaDaemon = startupInstance;</span><br></pre></td></tr></table></figure><h3 id="1-3-initClassLoaders"><a href="#1-3-initClassLoaders" class="headerlink" title="1.3. initClassLoaders"></a>1.3. initClassLoaders</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initClassLoaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建common类加载器</span></span><br><span class="line">        commonLoader = createClassLoader(<span class="string">"common"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (commonLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// no config file, default to this loader - we might be in a 'single' env.</span></span><br><span class="line">            commonLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line">        catalinaLoader = createClassLoader(<span class="string">"server"</span>, commonLoader);</span><br><span class="line">        sharedLoader = createClassLoader(<span class="string">"shared"</span>, commonLoader);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        handleThrowable(t);</span><br><span class="line">        log.error(<span class="string">"Class loader creation threw exception"</span>, t);</span><br><span class="line">        System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-createClassLoader"><a href="#1-4-createClassLoader" class="headerlink" title="1.4.  createClassLoader"></a>1.4.  createClassLoader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ClassLoader <span class="title">createClassLoader</span><span class="params">(String name, ClassLoader parent)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String value = CatalinaProperties.getProperty(name + <span class="string">".loader"</span>);</span><br><span class="line">    <span class="keyword">if</span> ((value == <span class="keyword">null</span>) || (value.equals(<span class="string">""</span>)))</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    value = replace(value);</span><br><span class="line">    List&lt;Repository&gt; repositories = <span class="keyword">new</span> ArrayList&lt;Repository&gt;();</span><br><span class="line">    StringTokenizer tokenizer = <span class="keyword">new</span> StringTokenizer(value, <span class="string">","</span>);</span><br><span class="line">    <span class="keyword">while</span> (tokenizer.hasMoreElements()) &#123;</span><br><span class="line">        String repository = tokenizer.nextToken().trim();</span><br><span class="line">        <span class="keyword">if</span> (repository.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check for a JAR URL repository</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(repository);</span><br><span class="line">            repositories.add(</span><br><span class="line">                <span class="keyword">new</span> Repository(repository, RepositoryType.URL));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="comment">// Ignore</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Local repository</span></span><br><span class="line">        <span class="keyword">if</span> (repository.endsWith(<span class="string">"*.jar"</span>)) &#123;</span><br><span class="line">            repository = repository.substring</span><br><span class="line">                (<span class="number">0</span>, repository.length() - <span class="string">"*.jar"</span>.length());</span><br><span class="line">            repositories.add(</span><br><span class="line">                <span class="keyword">new</span> Repository(repository, RepositoryType.GLOB))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (repository.endsWith(<span class="string">".jar"</span>)) &#123;</span><br><span class="line">            repositories.add(</span><br><span class="line">                <span class="keyword">new</span> Repository(repository, RepositoryType.JAR));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            repositories.add(</span><br><span class="line">                <span class="keyword">new</span> Repository(repository, RepositoryType.DIR));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ClassLoaderFactory.createClassLoader(repositories, parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器架构 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
